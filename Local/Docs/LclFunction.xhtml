<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by LibreOffice - see http://cgit.freedesktop.org/libreoffice/core/tree/filter/source/xslt for the code.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="en-US">- no title specified</title><meta name="DCTERMS.title" content="" xml:lang="en-US"/><meta name="DCTERMS.language" content="en-US" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.issued" content="2014-03-13T22:02:35.68" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.modified" content="2015-08-06T17:48:45.350000000" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.provenance" content="" xml:lang="en-US"/><meta name="DCTERMS.subject" content="," xml:lang="en-US"/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:12pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.Contents_20_1 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-indent:0in; }
	.Contents_20_2 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0.2in; margin-right:0.2in; text-indent:0in; }
	.Contents_20_3 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0.4in; margin-right:0in; text-indent:0in; }
	.Contents_20_4 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0.5898in; margin-right:0in; text-indent:0in; }
	.Contents_20_Heading { font-size:16pt; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-indent:0in; font-weight:bold; }
	.P1 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P10 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P100 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; text-align:left ! important; font-style:normal; }
	.P101 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P102 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P103 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P104 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P105 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P106 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; text-align:left ! important; font-style:normal; }
	.P107 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; text-align:left ! important; font-style:normal; }
	.P108 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P109 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P11 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P110 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P111 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; text-align:left ! important; }
	.P112 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; text-align:left ! important; }
	.P113 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; text-align:left ! important; }
	.P114 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P115 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P116 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P117 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P118 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P119 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P12 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P120 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P121 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P122 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P123 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P124 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P125 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P126 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P127 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P128 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P129 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P13 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P130 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P131 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P132 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P133 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P134 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P135 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P136 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P137 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P138 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P139 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P14 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P140 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P141 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P142 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P143 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P144 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P145 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P146 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P147 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P148 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P149 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P15 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P150 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P151 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P152 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P153 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P154 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P155 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P156 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P157 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P158 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P159 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P16 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P160 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P161 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P162 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P163 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P164 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P165 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P166 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P167 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P168 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; font-style:normal; }
	.P169 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P17 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P170 { font-size:12pt; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Consolas; writing-mode:lr-tb; }
	.P171 { font-size:12pt; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P172 { font-size:12pt; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Arial; writing-mode:lr-tb; }
	.P18 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P19 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P2 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P20 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P21 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P22 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P23 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P24 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P25 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P26 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P27 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P28 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P29 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P3 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P30 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P31 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P32 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P33 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; }
	.P34 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P35 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P36 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P37 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P38 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P39 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P4 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P40 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P41 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P42 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P43 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P44 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P45 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P46 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P47 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P48 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P49 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P5 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P50 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P51 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P52 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P53 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P54 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P55 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P56 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P57 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P58 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P59 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P6 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P60 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P61 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P62 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P63 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P64 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P65 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P66 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P67 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P68 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P69 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P7 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P70 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P71 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P72 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; color:#000000; }
	.P73 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; color:#000000; }
	.P74 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; color:#000000; }
	.P75 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; color:#000000; }
	.P76 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P77 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P78 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P79 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P8 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P80 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P81 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P82 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P83 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P84 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P85 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P86 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0.4898in; margin-right:0in; text-indent:-0.4898in; }
	.P87 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P88 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P89 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P9 { font-size:12pt; margin-bottom:0.0835in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-style:normal; }
	.P90 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P91 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P92 { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.P93 { font-size:16pt; font-weight:bold; margin-bottom:0.0835in; margin-left:0in; margin-right:0in; margin-top:0.1665in; text-indent:0in; font-family:Arial; writing-mode:lr-tb; }
	.P94 { font-size:12pt; margin-left:0in; margin-right:0in; text-indent:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P95 { font-size:12pt; margin-left:0.2in; margin-right:0.2in; text-indent:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P96 { font-size:12pt; margin-left:0.4in; margin-right:0in; text-indent:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P97 { font-size:12pt; margin-left:0.5898in; margin-right:0in; text-indent:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P98 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; text-align:left ! important; font-style:normal; }
	.P99 { font-size:10pt; margin-bottom:0.0835in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; text-align:left ! important; font-style:normal; }
	.Standard { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; }
	.Text_20_body { font-size:12pt; font-family:Times New Roman; writing-mode:lr-tb; margin-top:0in; margin-bottom:0.0835in; }
	.Bullet_20_Symbols { font-family:OpenSymbol; }
	.Internet_20_link { color:#000080; text-decoration:underline; }
	.T1 { font-size:12pt; }
	.T10 { font-size:12pt; font-style:normal; }
	.T100 { font-style:normal; }
	.T101 { font-style:normal; }
	.T102 { font-style:normal; }
	.T103 { font-style:normal; }
	.T104 { font-style:normal; }
	.T105 { font-style:normal; }
	.T106 { font-style:normal; }
	.T107 { font-style:normal; }
	.T108 { font-style:normal; }
	.T109 { font-style:normal; }
	.T11 { font-size:12pt; font-style:normal; }
	.T110 { font-style:normal; }
	.T111 { font-style:normal; }
	.T112 { font-style:normal; }
	.T113 { font-style:normal; }
	.T114 { font-style:normal; }
	.T115 { font-style:normal; }
	.T116 { font-style:normal; }
	.T117 { font-style:normal; }
	.T118 { font-style:normal; }
	.T119 { font-style:normal; }
	.T12 { font-size:12pt; font-style:normal; }
	.T120 { font-style:normal; }
	.T121 { font-style:normal; }
	.T122 { font-style:normal; }
	.T123 { font-style:normal; }
	.T124 { font-style:normal; }
	.T125 { font-style:normal; }
	.T126 { font-style:normal; }
	.T127 { font-style:normal; }
	.T13 { font-size:12pt; font-style:normal; }
	.T131 { font-size:12pt; }
	.T132 { font-family:Times New Roman; font-size:12pt; font-style:normal; }
	.T133 { font-family:Times New Roman; font-size:12pt; font-style:normal; }
	.T134 { font-family:Consolas; }
	.T135 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T136 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T137 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T138 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T139 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T14 { font-size:12pt; font-style:normal; }
	.T140 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T141 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T142 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T143 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T144 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T145 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T146 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T147 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T148 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T149 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T15 { font-size:12pt; font-style:normal; }
	.T150 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T151 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T152 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T153 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T154 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T155 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T156 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T157 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T158 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T159 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T16 { font-size:12pt; font-style:normal; }
	.T160 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T161 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T162 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T163 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T164 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T165 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T166 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T167 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T168 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T169 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T17 { font-size:12pt; font-style:normal; }
	.T170 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T171 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T172 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T173 { font-family:Consolas; font-size:10pt; }
	.T174 { font-family:Consolas; font-size:10pt; }
	.T175 { font-family:Consolas; font-size:10pt; }
	.T176 { font-family:Consolas; font-size:10pt; }
	.T177 { font-family:Consolas; font-size:10pt; }
	.T178 { font-family:Consolas; font-size:10pt; }
	.T179 { font-family:Consolas; font-size:10pt; }
	.T18 { font-size:12pt; font-style:normal; }
	.T180 { font-family:Consolas; font-size:10pt; }
	.T181 { font-family:Consolas; font-size:10pt; }
	.T182 { font-family:Consolas; font-size:12pt; }
	.T183 { font-family:Consolas; font-size:12pt; }
	.T184 { font-family:Consolas; font-size:12pt; }
	.T185 { font-family:Consolas; }
	.T186 { font-family:Consolas; }
	.T187 { font-family:Consolas; font-style:normal; }
	.T188 { font-family:Consolas; font-style:normal; }
	.T189 { font-family:Consolas; font-style:normal; }
	.T19 { font-size:12pt; font-style:normal; }
	.T193 { vertical-align:super; font-size:58%;font-size:12pt; font-style:normal; }
	.T194 { vertical-align:super; font-size:58%;font-size:14pt; font-weight:bold; }
	.T195 { font-size:12pt; font-style:normal; }
	.T2 { font-size:12pt; font-style:normal; }
	.T20 { font-size:12pt; font-style:normal; }
	.T204 { font-family:Ariel; font-size:14pt; }
	.T207 { font-family:Arial; }
	.T21 { font-size:12pt; font-style:normal; }
	.T217 { color:#000000; font-family:Consolas; font-size:10pt; }
	.T218 { color:#000000; font-family:Consolas; font-size:10pt; }
	.T219 { color:#000000; font-family:Consolas; font-size:10pt; }
	.T22 { font-size:12pt; font-style:normal; }
	.T220 { color:#7f0055; font-family:Consolas; font-size:10pt; font-weight:bold; }
	.T23 { font-size:12pt; font-style:normal; }
	.T24 { font-size:12pt; font-style:normal; }
	.T25 { font-size:12pt; font-style:normal; }
	.T26 { font-size:12pt; font-style:normal; }
	.T27 { font-size:12pt; font-style:normal; }
	.T28 { font-size:12pt; font-style:normal; }
	.T29 { font-size:12pt; font-style:normal; }
	.T3 { font-size:12pt; font-style:normal; }
	.T30 { font-size:12pt; font-style:normal; }
	.T31 { font-size:12pt; font-style:normal; }
	.T32 { font-size:12pt; font-style:normal; }
	.T33 { font-size:12pt; font-style:normal; }
	.T34 { font-size:12pt; font-style:normal; }
	.T35 { font-size:12pt; font-style:normal; }
	.T36 { font-size:12pt; font-style:normal; }
	.T37 { font-size:12pt; font-style:normal; }
	.T38 { font-size:12pt; font-style:normal; }
	.T39 { font-size:12pt; font-style:normal; }
	.T4 { font-size:12pt; font-style:normal; }
	.T40 { font-size:12pt; font-style:normal; }
	.T41 { font-size:12pt; font-style:normal; }
	.T42 { font-size:12pt; font-style:normal; }
	.T43 { font-size:12pt; font-style:normal; }
	.T44 { font-size:12pt; font-style:normal; }
	.T45 { font-size:12pt; font-style:normal; }
	.T46 { font-size:12pt; font-style:normal; }
	.T47 { font-size:12pt; font-style:normal; font-weight:normal; }
	.T48 { font-size:12pt; font-style:normal; font-weight:normal; }
	.T49 { font-size:12pt; font-style:normal; font-weight:normal; }
	.T5 { font-size:12pt; font-style:normal; }
	.T50 { font-size:12pt; }
	.T51 { font-size:12pt; }
	.T52 { font-size:12pt; }
	.T53 { font-size:12pt; }
	.T54 { font-size:12pt; }
	.T55 { font-size:12pt; }
	.T56 { font-size:12pt; }
	.T57 { font-size:12pt; }
	.T59 { font-family:Consolas; font-size:10pt; }
	.T6 { font-size:12pt; font-style:normal; }
	.T60 { font-family:Consolas; font-size:10pt; }
	.T61 { font-family:Consolas; font-size:10pt; }
	.T62 { font-family:Consolas; font-size:10pt; }
	.T63 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T64 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T65 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T66 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T67 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T68 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T69 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T7 { font-size:12pt; font-style:normal; }
	.T70 { font-family:Consolas; font-style:normal; }
	.T71 { font-family:Consolas; font-style:normal; }
	.T72 { font-family:Consolas; font-style:normal; }
	.T73 { font-family:Consolas; font-style:normal; }
	.T74 { font-family:Consolas; font-style:normal; }
	.T75 { font-family:Consolas; font-style:normal; }
	.T76 { font-family:Consolas; font-style:normal; }
	.T77 { font-family:Consolas; font-style:normal; }
	.T78 { font-style:normal; }
	.T79 { font-style:normal; }
	.T8 { font-size:12pt; font-style:normal; }
	.T80 { font-style:normal; }
	.T81 { font-style:normal; }
	.T82 { font-style:normal; }
	.T83 { font-style:normal; }
	.T84 { font-style:normal; }
	.T85 { font-style:normal; }
	.T86 { font-style:normal; }
	.T87 { font-style:normal; }
	.T88 { font-style:normal; }
	.T89 { font-style:normal; }
	.T9 { font-size:12pt; font-style:normal; }
	.T90 { font-style:normal; }
	.T91 { font-style:normal; }
	.T92 { font-style:normal; }
	.T93 { font-style:normal; }
	.T94 { font-style:normal; }
	.T95 { font-style:normal; }
	.T96 { font-style:normal; }
	.T97 { font-style:normal; }
	.T98 { font-style:normal; }
	.T99 { font-style:normal; }
	<!-- ODF styles with no properties representable as CSS -->
	.Sect1 .Index_20_Link .Numbering_20_Symbols .T128 .T129 .T130 .T190 .T191 .T192 .T196 .T197 .T198 .T199 .T200 .T201 .T202 .T203 .T205 .T206 .T208 .T209 .T210 .T211 .T212 .T213 .T214 .T215 .T216 .T221 .T222 .T223 .T224 .T225 .T226 .T227 .T58  { }
	</style></head><body dir="ltr" style="max-width:8.5in;margin-top:0.7874in; margin-bottom:0.7874in; margin-left:0.7874in; margin-right:0.7874in; writing-mode:lr-tb; "><table border="0" cellspacing="0" cellpadding="0" class="Sect1"><colgroup/><p class="P93">Table of Contents</p><tr><td><p class="P94"><a href="#__RefHeading__618_539951246">1Reference</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__620_539951246">1.1Macros</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__3230_295664061">1.1.1</a><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/><a href="#__RefHeading__3230_295664061"/></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__628_539951246">1.1.2</a><a href="#__RefHeading__628_539951246"/><a href="#__RefHeading__628_539951246"/><a href="#__RefHeading__628_539951246"/><a href="#__RefHeading__628_539951246"/><a href="#__RefHeading__628_539951246"/><a href="#__RefHeading__628_539951246"/><a href="#__RefHeading__628_539951246"/></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__658_539951246">1.1.3</a><a href="#__RefHeading__658_539951246"/><a href="#__RefHeading__658_539951246"/><a href="#__RefHeading__658_539951246"/><a href="#__RefHeading__658_539951246"/></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__3396_514162716">1.1.4WG_LCLFUNCTION_VAR_TYPEOF(function_variable_name)</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__634_539951246">1.2Function Variables</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__636_539951246">1.2.1Bound Function Variables</a></p></td></tr><tr><td><p class="P97"><a href="#__RefHeading__1450_695783189">1.2.1.1this_</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__638_539951246">1.2.2Set Function Variables</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1420_695783189">1.2.3Explicit vs Implicit Types</a></p></td></tr><tr><td><p class="P97"><a href="#__RefHeading__1422_695783189">1.2.3.1Explicit Type Specification Syntax</a></p></td></tr><tr><td><p class="P97"><a href="#__RefHeading__1424_695783189">1.2.3.2Implicit Type Specification Syntax</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1654_539951246">1.3Standard Type Names and Constants</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1426_695783189">1.3.1Local Function Type Name</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1428_695783189">1.3.2Local Function Signature Typedefs and Constants</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1430_695783189">1.4Interactions with Boost.Function</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1432_695783189">1.5Interactions with other LclFunctions</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1434_695783189">1.5.1As Function Variables and Function Parameter Arguments</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1436_695783189">1.5.2Nesting</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1438_695783189">1.5.3Same Line Declarations</a></p></td></tr><tr><td><p class="P94"><a href="#__RefHeading__1760_539951246">2Limitations</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1762_539951246">2.1C++03 Limitations</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1764_539951246">2.1.1Library Boundaries</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1448_695783189">2.1.2Set-To Expressions</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1766_539951246">2.2General Limitations</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1768_539951246">2.2.1Macro Parameters Containing Commas</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__3232_295664061">2.2.2Local Function Overloading</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1440_695783189">2.2.3Local Function Variables</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1770_539951246">2.2.4Local Function Definitions</a></p></td></tr><tr><td><p class="P94"><a href="#__RefHeading__1772_539951246">3Grammar</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1774_539951246">3.1Special Symbols</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1776_539951246">3.2EBNF</a></p></td></tr><tr><td><p class="P94"><a href="#__RefHeading__1778_539951246">4Design Rationale</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1780_539951246">4.1Preprocessor Limitations</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1782_539951246">4.1.1Variadic Macro Support and Multi-Input User Specification</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1784_539951246">4.2params Named Parameter Specification Format</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1786_539951246">4.3Forwarding Strategies of params Arguments</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1788_539951246">4.3.1Current Forwarding Strategy</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1790_539951246">4.3.2Alternative Forwarding Strategy with Alternative param-tuple Syntax</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1452_695783189">4.4this_ const Qualified Bound Function Variables</a></p></td></tr><tr><td><p class="P94"><a href="#__RefHeading__22112_1020142234">5Tutorial and Examples</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__2141_1372831738">5.1Params</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__2143_1372831738">5.2Varbind</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__2145_1372831738">5.3Varset</a></p></td></tr><tr><td><p class="P94"><a href="#__RefHeading__1442_695783189">6Future Features</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__3633_514162716">6.1Auto Assign Syntax</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1866_929216580">6.2make_ref/make_cref</a></p></td></tr><tr><td><p class="P94"><a href="#__RefHeading__1848_929216580">7Open Issues</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1850_929216580">7.1Exception Specifications</a></p></td></tr><tr><td><p class="P94"><a href="#__RefHeading__1852_929216580">8Alternatives</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1854_929216580">8.1Boost.Local_Function</a></p></td></tr><tr><td><p class="P96"><a href="#__RefHeading__1856_929216580">8.1.1Differences:</a></p></td></tr><tr><td><p class="P94"><a href="#__RefHeading__1858_929216580">9Acknowledgments</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1860_929216580">9.1Boost.Preprocessor</a></p></td></tr><tr><td><p class="P95"><a href="#__RefHeading__1862_929216580">9.2Boost.Local_Function</a></p></td></tr></table><p class="P76"> </p><h1 class="P121"><a id="a_1_Reference"><span>1</span></a><a id="__RefHeading__618_539951246"/>Reference</h1><h2 class="P130"><a id="a_1_1_Macros"><span>1.1</span></a><a id="__RefHeading__620_539951246"/>Macro<span class="T227">s</span></h2><h3 class="P151"><a id="a_1_1_1_WG_LCLFUNCTION_name__…_WG_LCLFUNCTION_TPL_name__…_WG_LCLFUNCTION_END"><span>1.1.1</span></a><a id="__RefHeading__3230_295664061"/><span class="T70">WG_LCLFUNCTION</span><span class="T71">(</span><span class="T72">name, </span><span class="T71">…)<br/></span><span class="T73">W</span><span class="T70">G_LCLFUNCTION</span><span class="T74">_TPL</span><span class="T71">(</span><span class="T72">name, </span><span class="T71">…)<br/>WG_LCLFUNCTION_END</span></h3><ol><li><ol><li><ol><li><p class="P120"><span class="T86">These macros start and end local function definition</span><span class="T87">s and, </span><span class="T88">as such</span><span class="T86">, must be used within a declarative context.</span><span class="T87"> </span><span class="T100">Their syntax is defined </span><a href="#a_here" class="Internet_20_link"><span class="T99">here</span></a><span class="T100">. </span><span class="T64">WG_LCLFUNCTION</span><span class="T66"> </span><span class="T87">is for use in non-template functions and </span><span class="T64">WG_LCLFUNCTION</span><span class="T65">_TPL</span><span class="T66"> </span><span class="T87">is for use in template functions</span><span class="T125">. The s</span><span class="T123">econd argument</span><span class="T125"> of the aforementioned macros</span><span class="T123"> </span><span class="T101">both a</span><span class="T89">ccept the following named parameters</span><span class="T124">, in the order specified below</span><span class="T89">:</span></p></li></ol></li></ol></li><li><p class="P98" style="margin-left:cm;"><span style="display:block;float:left;min-width:0.635cm;">a)</span>void<span class="odfLiEnd"/> </p></li><li><p class="P106" style="margin-left:cm;"><span style="display:block;float:left;min-width:0.635cm;">b)</span><span class="T173">return</span> <span class="odfLiEnd"/> </p><p class="P111" style="margin-left:cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T89">Used to specify the return </span><span class="T92">type</span><span class="T89"> of the local function.</span><span class="T90"> If not used, the return type defaults to void.</span><span class="odfLiEnd"/> </p></li><li><p class="P99" style="margin-left:cm;"><span style="display:block;float:left;min-width:0.635cm;">c)</span>params<span class="odfLiEnd"/> </p><p class="P111" style="margin-left:cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T89">Used to specify the signature of the local function.</span><span class="T91"> If not used, the signature defaults to void.</span><span class="odfLiEnd"/> </p><p class="P112" style="margin-left:cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T97">The number of arguments </span><span class="T99">for this named parameter </span><span class="T97">is limited </span><span class="T98">by </span><a href="#a_WG_PP_LCLFUNCTION_CONFIG_PARAMS_MAX_ARITY" class="Internet_20_link"><span class="T145">WG_PP_LCLFUNCTION_CONFIG_PARAMS_MAX_ARITY</span></a><span class="T98">.</span><span class="odfLiEnd"/> </p></li><li><p class="P99" style="margin-left:cm;"><span style="display:block;float:left;min-width:0.635cm;">d)</span>varbind<span class="odfLiEnd"/> </p><p class="P113" style="margin-left:cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T89">Used to </span><span class="T93">bind function variables </span><span class="T94">with </span><span class="T93">variables of the </span><span class="T95">same name in </span><span class="T93">enclosing scopes.</span><span class="T95"> </span><span class="T96">For more information see </span><a href="#a_Bound_Function_Variables" class="Internet_20_link"><span class="T117">Bound Function Variables</span></a><span class="T96">.</span><span class="odfLiEnd"/> </p></li><li><p class="P100" style="margin-left:cm;"><span style="display:block;float:left;min-width:0.635cm;">e)</span>varset<span class="odfLiEnd"/> </p><p class="P107" style="margin-left:cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span>Used to set function variables with user declared expressions. For more information see <a href="#a_Set_Function_Variables" class="Internet_20_link"><span class="T201">Set Function Variables</span></a>.<span class="odfLiEnd"/> </p></li></ol><h3 class="P152"><a id="a_1_1_2_WG_LCLFUNCTION_TYPENAME_name_"><span>1.1.2</span></a><a id="__RefHeading__628_539951246"/><span class="T187">WG_LCLFUNCTION</span><span class="T188">_TYPE</span><span class="T189">NAME</span><span class="T71">(</span><span class="T72">name</span><span class="T75">)</span></h3><p class="P13"><span class="T132">Expands to the implementation defined type name of the local function named </span><span class="T146">name</span><span class="T133"> without invoking </span><span class="T170">BOOST_TYPEOF</span><span class="T133">, as a result, top-level qualifiers like const and reference are preserved.</span></p><h3 class="P153"><a id="a_1_1_3_WG_PP_LCLFUNCTION_CONFIG_PARAMS_MAX_ARITY"><span>1.1.3</span></a><a id="__RefHeading__658_539951246"/><span class="T76">WG_PP_LCLFUNCTION_</span><span class="T77">CONFIG_</span><span class="T76">PARAMS_MAX_ARITY</span></h3><p class="P5"><span class="T192">A user configurable object macro that controls the maximum number of arguments that may be </span><span class="T192">specified for the named parameter </span><span class="T147">params</span><span class="T192">. If set, then it must expand to a non-negative integer, else it defaults to the number 5.</span></p><p class="P5"><span class="T192">The maximum number of arguments which </span><span class="T147">params</span><span class="T107"> can handle is equal to:</span></p><p class="P86"><span class="T136">        </span><span class="T135">min(</span><span class="T139"> </span><span class="T67">WG_PP_LCLFUNCTION_</span><span class="T68">CONFIG_</span><span class="T67">PARAMS_MAX_ARITY</span><span class="T69">, BOOST_PP_LIMIT_REPEAT )</span></p><p class="P55"><span class="T78">Note: in order for this macro to take effect in any particular translation unit, that translation unit must define it before the first inclusion of</span><span class="T126"> </span><span class="T172">LclFunction.hh</span><span class="T126"> .</span></p><h3 class="P156"><a id="a_1_1_4_WG_LCLFUNCTION_VAR_TYPEOF_function_variable_name_"><span>1.1.4</span></a><a id="__RefHeading__3396_514162716"/><span class="T185">WG_LCLFUNCTION_</span><span class="T186">VAR_</span><span class="T185">TYPEOF(function_variable_name)</span><span class="T207"> </span></h3><p class="P11"><span class="T36">This macro is only available within a local function body and</span><span class="T39">,</span><span class="T36"> without invoking </span><span class="T166">BOOST_TYPEOF</span><span class="T168">,</span><span class="T36"> expands to the typename of the user-specified function variable </span><span class="T166">function_variable_name</span><span class="T36">.</span></p><p class="P12"><span class="T37">NOTE: unlike </span><span class="T167">BOOST_TYPEOF</span><span class="T37">, this macro does not strip any top level qualifiers</span><span class="T38"> like const or reference</span><span class="T37">.</span></p><h2 class="P131"><a id="a_1_2_Function_Variables"><span>1.2</span></a><a id="__RefHeading__634_539951246"/>Function Variables</h2><p class="P14"><span class="T102">Function variables are </span><span class="T104">variables that are associated </span><span class="T102">with </span><span class="T109">each</span><span class="T102"> local function.</span><span class="T104"> They can be accessed directly from within the local function body and preserve their state across multiple calls to the same local function instance.</span><span class="T102"> There are two types of function variables</span><span class="T103">: bound and set, and each </span><span class="T108">are</span><span class="T103"> described below</span><span class="T104">.</span></p><p class="Text_20_body"><span class="T105">Note: Function variables </span>are not necessarily implemented as member variables of a function instance. It is an implementation detail what form they take. <span class="T190">T</span>hat's why they're specified with <span class="T140">var</span> <span class="T191">prefixed names and not </span><span class="T140">mem</span><span class="T106"> prefixed</span> <span class="T191">names</span><span class="T59">.</span></p><p class="P6"><span class="T197">Note: It is the user's responsibility to ensure that at the time of a local function invocation all its function variables are valid. (See </span><a href="#a_limitations" class="Internet_20_link"><span class="T197">limitations</span></a><span class="T197"> for more information.)</span></p><h3 class="P157"><a id="a_1_2_1_Bound_Function_Variables"><span>1.2.1</span></a><a id="__RefHeading__636_539951246"/>Bound Function Variables</h3><p class="P15"><span class="T7">Bound function variables are specified using the named parameter </span><span class="T142">varbind</span><span class="T7">. They are so named because their values are bound to variables of the same name from the enclosing scope(s).</span></p><h4 class="P170"><a id="a_1_2_1_1_this_"><span>1.2.1.1</span></a><a id="__RefHeading__1450_695783189"/>this_</h4><p class="P10"><span class="T47">Bound variables named </span><span class="T137">this_</span><span class="T47"> are implicitly bound to </span><span class="T137">this</span><span class="T47"> keyword, this is in keeping with existing BOOST conventions.</span><span class="T48"> If implicitly typed and explicitly qualified </span><span class="T138">const</span><span class="T48"> then the constness will apply to the pointed-to-type and not the type of </span><span class="T138">this_</span><span class="T48"> (see </span><a href="#a_Rationale" class="Internet_20_link"><span class="T49">Rationale</span></a><span class="T48">).</span></p><h3 class="P157"><a id="a_1_2_2_Set_Function_Variables"><span>1.2.2</span></a><a id="__RefHeading__638_539951246"/>Set Function Variables</h3><p class="P43"><span class="T8">Set function variables are specified using the named parameter </span><span class="T143">varset</span><span class="T8">. They are so named because their values are determined by user specified expressions. Such an expression may contain identifiers from the enclosing scope(s), but not any </span><span class="T9">declared in </span><span class="T148">varset</span><span class="T9"> itself.</span><span class="T12"> </span><span class="T28">I</span><span class="T12">f the said expression contains any commas, then the whole expression must be wrapped in an extra set of parenthesis (</span><span class="T13">see </span><a href="#a_Limitations" class="Internet_20_link"><span class="T13">Limitations</span></a><span class="T13">)</span><span class="T29">.</span><span class="T28"> </span><span class="T29">A</span><span class="T28">dditionally, </span><span class="T31">neither</span><span class="T28"> shall </span><span class="T31">it </span><span class="T28">be an array initializer if compiling for C++03</span><span class="T29"> (see </span><a href="#a_Limitations" class="Internet_20_link"><span class="T30">Limitations</span></a><span class="T29">)</span><span class="T28">.</span></p><h3 class="P158"><a id="a_1_2_3_Explicit_vs_Implicit_Types"><span>1.2.3</span></a><a id="__RefHeading__1420_695783189"/>Explicit vs Implicit Types</h3><p class="P44"><span class="T22">Function variables may be explicitly or implicitly typed. If implicitly typed, the types of such variables are determined from the variable they are bound to, or</span><span class="T23">,</span><span class="T22"> from the expression they are set to, via </span><span class="T157">BOOST_TYPEOF</span><span class="T22">.</span><span class="T23"> Thus, it is important to remember that implicitly typed variables lose their top</span><span class="T25">-</span><span class="T23">most const or reference qualification (see </span><a href="http://www.boost.org/doc/html/typeof/refe.html#typeof.typo" class="Internet_20_link"><span class="T158">BOOST_TYPEOF</span></a><span class="T23">).</span></p><h4 class="P171"><a id="a_1_2_3_1_Explicit_Type_Specification_Syntax"><span>1.2.3.1</span></a><a id="__RefHeading__1422_695783189"/>Explicit Type Specification Syntax</h4><p class="P45"><span class="T24">Function variables </span><span class="T25">are</span><span class="T24"> explicitly typed </span><span class="T25">when</span><span class="T24"> </span><span class="T25">their </span><span class="T40">variable</span><span class="T24"> </span><span class="T40">is</span><span class="T24"> preceded by</span><span class="T40"> the declaration</span><span class="T24"> </span><span class="T159">type(type-specifier)</span><span class="T24">, where </span><span class="T159">type-specifier</span><span class="T24"> is defined in the C++ standard</span><span class="T27"> and the actual type of the associated function variable must be implicitly convertible to it</span><span class="T24">.</span></p><h4 class="P172"><a id="a_1_2_3_2_Implicit_Type_Specification_Syntax"><span>1.2.3.2</span></a><a id="__RefHeading__1424_695783189"/>Implicit Type Specification Syntax</h4><p class="P46"><span class="T25">Function variables that are not explicitly typed are implicitly typed. Their declaration may be preceded by the keyword combinations </span><span class="T160">const</span><span class="T25">, </span><span class="T160">ref</span><span class="T25">, or </span><span class="T160">const ref</span><span class="T25">, indicating how their deduced types should be top-most qualified.</span><span class="T26"> Hence, an implicitly typed function variable shall not be named "ref".</span></p><h2 class="P148"><a id="a_1_3_Standard_Type_Names_and_Constants"><span>1.3</span></a><a id="__RefHeading__1654_539951246"/>Standard Type Names and Constants</h2><h3 class="P159"><a id="a_1_3_1_Local_Function_Type_Name"><span>1.3.1</span></a><a id="__RefHeading__1426_695783189"/>Local Function Type Name</h3><p class="P39"><span class="T18">T</span><span class="T17">he type of any local function object may be obtained from </span><a href="#a_WG_LCLFUNCTION_TYP" class="Internet_20_link"><span class="T156">WG_LCLFUNCTION_TYP</span></a><a href="#a_ENAME" class="Internet_20_link"><span class="T169">ENAME</span></a><span class="T17">.</span></p><h3 class="P159"><a id="a_1_3_2_Local_Function_Signature_Typedefs_and_Constants"><span>1.3.2</span></a><a id="__RefHeading__1428_695783189"/>Local Function <span class="T208">Signature </span>Typedefs and Constants</h3><p class="P30"><span class="T110">Each local function defines the following typedefs</span><span class="T114"> and constants</span><span class="T110">:</span></p><ul><li><p class="P101" style="margin-left:0cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•</span>function_type<span class="odfLiEnd"/> </p></li><li><p class="P102" style="margin-left:0cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•</span><span class="T209">&lt;some-constant-integral-type&gt;</span> arity<span class="odfLiEnd"/> </p></li><li><p class="P103" style="margin-left:0cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•</span>result_type<span class="odfLiEnd"/> </p></li><li><p class="P104" style="margin-left:0cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•</span>arg1_type<span class="odfLiEnd"/> </p></li><li><p class="P104" style="margin-left:0cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•</span>...<span class="odfLiEnd"/> </p></li><li><p class="P104" style="margin-left:0cm;"><span class="Bullet_20_Symbols" style="display:block;float:left;min-width:0.635cm;">•</span>argN_type<span class="odfLiEnd"/> </p></li></ul><p class="P7"><span class="T178">function_type</span><span class="T205"> is an alias for </span><span class="T110">the local function's </span><span class="T206">user </span><span class="T110">specified signature and return type. </span></p><p class="P48"><span class="T141">result_type</span><span class="T14"> is an alias for the return type of </span><span class="T162">function_type</span><span class="T32">.</span></p><p class="P49"><span class="T141">argM_type</span><span class="T14"> is an alias for the M</span><span class="T193">th</span><span class="T195"> element of</span><span class="T14"> </span><span class="T141">boost::function_type::parameter_type&lt;</span><span class="T162">function_type</span><span class="T141">&gt;</span><span class="T14">.</span><span class="T15"> </span></p><p class="P50"><span class="T33">Except for </span><span class="T162">function_type</span><span class="T33">, t</span><span class="T15">he</span><span class="T34"> above</span><span class="T15"> are analog</span><span class="T35">ues</span><span class="T15"> to the type names and constants defined by </span><span class="T155">boost::function_traits</span><span class="T15"> in </span><a href="http://www.boost.org/libs/type_traits" class="Internet_20_link"><span class="T16">Boost.TypeTraits</span></a><span class="T15"> library.</span></p><p class="P40"><span class="T19">Note: from within the local function body the above can be directly accessed. Outside the local function body one must use the </span><a href="#a_local_function_type_name" class="Internet_20_link"><span class="T19">local function type name</span></a><span class="T20"> scope to access them</span><span class="T19">.</span></p><h2 class="P150"><a id="a_1_4_Interactions_with_Boost_Function"><span>1.4</span></a><a id="__RefHeading__1430_695783189"/>Interactions with Boost.Function</h2><p class="P41"><span class="T21">Local functions may be assigned to </span><a href="http://www.boost.org/libs/function" class="Internet_20_link"><span class="T21">Boost.Function</span></a><span class="T198">'s </span><span class="T176">boost::function</span><span class="T198">, and, respecting all the usual </span><a href="#a_caveats" class="Internet_20_link"><span class="T198">caveats</span></a><span class="T198">, returned from their scope of definition.</span></p><p class="P42"><span class="T199">Note: the const qualification of a </span><span class="T176">boost::function</span><span class="T199"> wrapped local function will not affect how the local function is called, it only affects whether the </span><span class="T176">boost::function</span><span class="T199"> object can be mutated or not.</span></p><h2 class="P132"><a id="a_1_5_Interactions_with_other_LclFunctions"><span>1.5</span></a><a id="__RefHeading__1432_695783189"/>Interactions with other LclFunctions</h2><h3 class="P160"><a id="a_1_5_1_As_Function_Variables_and_Function_Parameter_Arguments"><span>1.5.1</span></a><a id="__RefHeading__1434_695783189"/>As Function Variables and Function Parameter Arguments</h3><p class="P24">Because local functions have non-local types, they may be used as arguments to local function variables and local function parameters.</p><h3 class="P160"><a id="a_1_5_2_Nesting"><span>1.5.2</span></a><a id="__RefHeading__1436_695783189"/>Nesting</h3><p class="P24">Local functions may be nested within one another and may even reuse the same name, with the inner most scope name overriding all others.</p><h3 class="P163"><a id="a_1_5_3_Same_Line_Declarations"><span>1.5.3</span></a><a id="__RefHeading__1438_695783189"/>Same Line Declarations</h3><p class="P27">Multiple local functions may be declared on the same line, for example, as part of a larger macro definition.</p><h1 class="P122"><a id="a_2_Limitations"><span>2</span></a><a id="__RefHeading__1760_539951246"/>Limitations</h1><h2 class="P133"><a id="a_2_1_C__03_Limitations"><span>2.1</span></a><a id="__RefHeading__1762_539951246"/>C++03 Limitations</h2><h3 class="P164"><a id="a_2_1_1_Library_Boundaries"><span>2.1.1</span></a><a id="__RefHeading__1764_539951246"/>Library Boundaries</h3><p class="P26">Local functions may not be usable across library boundaries because their user-provided definitions are ultimately implemented using local types, and in C++03 local types lack linkage. Hence, their symbols may not have been exported.</p><h3 class="P169"><a id="a_2_1_2_Set-To_Expressions"><span>2.1.2</span></a><a id="__RefHeading__1448_695783189"/>Set-To Expressions</h3><p class="P47"><span class="T56">In C++03 the set-to expressions of a set function variable shall not be array initializer. This is because array initializers may not be used as parameter arguments in C++03. This restriction may be relaxed but the work around was deemed not worth the effort, especially given the existence of better alternative data types such as </span><span class="T177">std::vector</span><span class="T56"> and </span><span class="T177">boost::array</span><span class="T56">.</span></p><h2 class="P149"><a id="a_2_2_General_Limitations"><span>2.2</span></a><a id="__RefHeading__1766_539951246"/>General Limitations</h2><h3 class="P161"><a id="a_2_2_1_Macro_Parameters_Containing_Commas"><span>2.2.1</span></a><a id="__RefHeading__1768_539951246"/>Macro Parameters Containing Commas</h3><p class="P16"><span class="T10">The preprocessor treats commas appearing within macro parameters as delimiters; hence they are to be avoided in type expressions and wrapped with an extra set of parenthesis when used with value expressions. The former is necessary because there is no known way to extract</span><span class="T41"> the</span><span class="T10"> user specified type. </span><span class="T11">The latter is necessary to prevent the comma from acting as a delimiter in the preprocessor and, hence, making it appear as if the function-like macro had extra parameter(s).</span></p><h3 class="P165"><a id="a_2_2_2_Local_Function_Overloading"><span>2.2.2</span></a><a id="__RefHeading__3232_295664061"/>Local Function Overloading</h3><p class="P28">Local functions may not be overloaded.</p><h3 class="P166"><a id="a_2_2_3_Local_Function_Variables"><span>2.2.3</span></a><a id="__RefHeading__1440_695783189"/>Local Function Variables</h3><p class="P57"><span class="T44">Local function variables must be valid at the time of any invocation of their associated local function instance. This means that if any local function variable references any non-local function object, that object must be valid at the time </span><span class="T45">of the associated local function invocation.</span></p><p class="P58"><span class="T46">Implicitly typed local</span><span class="T43"> function variables may not be named "ref".</span></p><h3 class="P167"><a id="a_2_2_4_Local_Function_Definitions"><span>2.2.4</span></a><a id="__RefHeading__1770_539951246"/>Local Function Definitions</h3><p class="P26">Local functions are ultimately implemented using local class functions, hence any limitations imposed by the language on the latter will also carry over to the former.</p><h1 class="P127"><a id="a_3_Grammar"><span>3</span></a><a id="__RefHeading__1772_539951246"/>Grammar</h1><h2 class="P134"><a id="a_3_1_Special_Symbols"><span>3.1</span></a><a id="__RefHeading__1774_539951246"/>Special Symbols</h2><ol><li><p class="P108" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">a)</span>[...]<span class="odfLiEnd"/> </p><p class="P108" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span>Items enclosed in square brackets denote optional grammar entries.<span class="odfLiEnd"/> </p></li><li><p class="P105" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">b)</span>return params <span class="T202">type </span>varbind varset const ref<span class="odfLiEnd"/> </p><p class="P108" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span>These tokens are to be regarded as non-punctuation terminals.<span class="odfLiEnd"/> </p></li></ol><h2 class="P135"><a id="a_3_2_EBNF"><span>3.2</span></a><a id="__RefHeading__1776_539951246"/>EBNF</h2><p class="P22"> </p><p class="P77">lclfunction-usage ::=</p><p class="P62">  lclfunction-start-macro ( name , lclfunction-spec )</p><p class="P62">  function-body</p><p class="P62">  WG_LCLFUNCTION_END [;]</p><p class="P62"> </p><p class="P62">lclfunction-start-macro ::= </p><p class="P62">    WG_LCLFUNCTION</p><p class="P62">  | WG_LCLFUNCTION_TPL</p><p class="P62"> </p><p class="P62">lclfunction-spec ::=</p><p class="P62">    void</p><p class="P62">  | [return nlt-return-tuple]</p><p class="P62">    [params param-seq]</p><p class="P62">    [varbind varbind-seq]</p><p class="P62">    [varset varset-seq]</p><p class="P62"> </p><p class="P64">  | [return nlt-return-tuple]</p><p class="P64">    [params param-list]<span class="T194">(V)</span> </p><p class="P64">    [varbind varbind-list]<span class="T194">(V)</span> </p><p class="P64">    [varset varset-seq]</p><p class="P62"> </p><p class="P62">nlt-return-tuple ::=</p><p class="P62">    ( non-local-type )</p><p class="P62"> </p><p class="P62">param-seq ::=<span class="T203"> </span></p><p class="P63">    ( parameter-declaration )</p><p class="P63">  | param-seq ( parameter-declaration )</p><p class="P62"> </p><p class="P66">param-list ::=</p><p class="P66">     <span class="T216">parameter-declaration</span></p><p class="P66">  |  param-list ,  <span class="T216">parameter-declaration</span></p><p class="P62"> </p><p class="P62">varbind-seq ::= nlt-bound-tuple-seq</p><p class="P62"> </p><p class="P67">varbind-list ::= </p><p class="P67">     nlt-bound-var-dcln</p><p class="P67">  |  varbind-list , nlt-bound-var-dcln</p><p class="P62"> </p><p class="P62">varset-seq ::= nlt-set-tuple-seq</p><p class="P62"> </p><p class="P62">nlt-bound-tuple-seq ::=</p><p class="P62">    nlt-bound-tuple</p><p class="P62">  | nlt-bound-tuple-seq nlt-bound-tuple</p><p class="P62"> </p><p class="P62">nlt-set-tuple-seq ::=</p><p class="P62">    nlt-set-tuple</p><p class="P62">  | nlt-set-tuple-seq nlt-set-tuple</p><p class="P62"> </p><p class="P62">nlt-bound-tuple ::=</p><p class="P62">  ( nlt-bound-var-dcln )</p><p class="P62"> </p><p class="P62">nlt-set-tuple ::=</p><p class="P62">  ( nlt-set-var-dcln )</p><p class="P62"> </p><p class="P62">nlt-bound-var-dcln ::= nlt-type-var-dcln</p><p class="P62"> </p><p class="P62">nlt-set-var-dcln ::= nlt-type-var-dcln , value-expr</p><p class="P62"> </p><p class="P62">nlt-type-var-dcln ::=</p><p class="P62">    implicit-non-local-type-var-dcln</p><p class="P62">  | explicit-non-local-type-var-dcln</p><p class="P62"> </p><p class="P62">implicit-non-local-type-var-dcln ::=</p><p class="P62">  implicit-type-var-dcln</p><p class="P62"> </p><p class="P62">explicit-non-local-type-var-dcln ::=</p><p class="P78">  explicit-non-local-type var-name</p><p class="P78"> </p><p class="P79"><span class="T59">implicit-type-var-dcln </span><span class="T60">:</span><span class="T59">:=</span></p><p class="P62">  implicit-type var-name</p><p class="P62"> </p><p class="P79"><span class="T59">implicit-type </span><span class="T62">:</span><span class="T59">:= lib-type-qualifiers | empty-string</span></p><p class="P62"> </p><p class="P68"><span class="T59">lib-type-qualifiers </span><span class="T62">:</span><span class="T59">:= const | ref | const ref</span></p><p class="P62"> </p><p class="P68"><span class="T59">explicit-non-local-type </span><span class="T62">:</span><span class="T59">:= </span></p><p class="P68"><span class="T59">  </span><span class="T61">type</span><span class="T59">( non-local-type-specifier )</span></p><p class="P62"> </p><p class="P65"><span class="T194">(V)</span> Requires a variadic macro supported preprocessor.</p><p class="P68"><span class="T59">function-body </span><span class="T62">:</span><span class="T59">:= See C++ standard.</span></p><p class="P68"><span class="T59">var-name </span><span class="T62">:</span><span class="T59">:= A C++ variable name.</span></p><p class="P68"><span class="T59">non-local-type-specifier </span><span class="T62">:</span><span class="T59">:=</span></p><p class="P62">  A type-specifier that specifies a non-local type.</p><p class="P68"><span class="T59">type-specifier </span><span class="T62">:</span><span class="T59">:= See C++ standard.</span></p><p class="P68"><span class="T59">value-expr </span><span class="T62">:</span><span class="T59">:= A C++ expression evaluating to some value.</span></p><p class="P62"> </p><h1 class="P128"><a id="a_4_Design_Rationale"><span>4</span></a><a id="__RefHeading__1778_539951246"/>Design Rationale</h1><h2 class="P136"><a id="a_4_1_Preprocessor_Limitations"><span>4.1</span></a><a id="__RefHeading__1780_539951246"/>Preprocessor Limitations</h2><h3 class="P162"><a id="a_4_1_1_Variadic_Macro_Support_and_Multi-Input_User_Specification"><span>4.1.1</span></a><a id="__RefHeading__1782_539951246"/><span class="T225">Variadic Macro Support and </span>Multi-Input User Specification</h3><p class="P1"><span class="T4">Depending on preprocessor support</span><span class="T2">, multi-input specification may </span><span class="T3">take the form of a single n-tuple, </span><span class="T4">or</span><span class="T3"> a sequence of n</span><span class="T42"> 1</span><span class="T3">-tuples</span><span class="T4">, where the former is allowed only if variadic macros are supported by the preprocessor.</span><span class="T5"> The reasoning for this is that an n-tuple is easier to read and type than a sequence of n 1-tuples.</span><span class="T6"> For example:</span></p><p class="P23"><span> <span class="T173">params (int x, int y, std::string label)</span></span></p><p class="P23">is assumed to be preferable to:</p><p class="P21"><span class="T50">        </span><span class="T173">params (int x) (int y) (std::string label)</span></p><p class="P8"> </p><p class="P9">Variadic macro support is not implemented for set variables because in this author's opinion it obfuscates the syntax. This is because set variables come in pairs and any use of variadic macros will flatten the pairs into one comma delimited list of tokens<span class="T226">;</span> and this author argues that reading set variables in 2-tuple pairs is more natural than reading them flattened out.</p><h2 class="P137"><a id="a_4_2_params_Named_Parameter_Specification_Format"><span>4.2</span></a><a id="__RefHeading__1784_539951246"/>params Named Parameter Specification Format</h2><p class="P35"><span class="T1">The specification for the </span><span class="T131">named</span><span class="T1"> parameter </span><span class="T144">params</span><span class="T1"> needs to be PP parseable because the codegen needs to construct an expanded parameter list from those entries.</span> That is, we need to be able to insert a comma before and after the full<span class="T58"> list of those entries. As a result, if variadic macros are not supported then </span><span class="T144">params</span><span class="T128"> must be specified as a sequence of 1-tuples.</span></p><h2 class="P138"><a id="a_4_3_Forwarding_Strategies_of_params_Arguments"><span>4.3</span></a><a id="__RefHeading__1786_539951246"/>Forwarding Strategies of params Arguments</h2><p class="P36"><span class="T52">Any code generated for </span><span class="T174">WG_PP_LCLFUNCTION</span><span class="T52"> must involve a two step function call where an external function forwards any of the arguments of "params" to an internal function that encapsulates the user defined scope of this macro. The reason for this is to get around the </span><span class="T51">C++03 </span><span class="T52">rule of </span><span class="T51">local classes </span><span class="T52">not being usable in </span><span class="T51">template parameters</span><span class="T52">.</span><span class="T53"> In this section we discuss the forwarding strategy used, and </span><span class="T57">another</span><span class="T53"> alternative using slight</span><span class="T54">l</span><span class="T53">y different syntax for param</span><span class="T55">-tuple arguments of </span><span class="T144">params</span><span class="T53">.</span></p><p class="P29">For the rest of this this discussion will use variants of the following example:</p><p class="P2"><span class="T129">        </span><span class="T174">WG_PP_LCLFUNCTION(func, params (</span><span class="T175">...</span><span class="T174">) )</span></p><p class="P31">which, without loss of generality, we can assume will generate the following code:</p><p class="P2"><span class="T129">        </span><span class="T174">void interface_func(</span><span class="T175">...</span><span class="T174">);</span></p><p class="P32"><span> <span class="T173">void impl_func(...);</span></span></p><p class="P37"><span class="T129">where </span><span class="T174">interface_func</span><span class="T129"> is the external function that merely forwards all of its parameters to </span><span class="T174">impl_func</span><span class="T129">. It is important to note that:</span></p><ol><li><p class="P114" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">a)</span><span class="T130">in the generation of </span><span class="T174">interface_func</span><span class="T130"> only TMP tools are available for use, and</span><span class="odfLiEnd"/> </p></li><li><p class="P115" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">b)</span>in the generation of <span class="T174">impl_func</span> both PPMP and TMP tools are available for use.<span class="odfLiEnd"/> </p></li></ol><p class="P38"><span class="T130">Additionally, we don't have much leeway in generating </span><span class="T174">interface_func</span><span class="T130"> because its signature and return type must be semantically equivalent to the one specified by </span><span class="T174">WG_PP_LCLFUNCTION</span><span class="T130"> macro; this is because, as its name implies, </span><span class="T174">interface_func</span><span class="T130"> is the client facing interface to the user specified and defined local function. (If this were not the case, then dispatching </span><span class="T174">interface_func</span><span class="T130"> based on its signature in TMP code may result in surprising and unexpected behavior.)</span></p><h3 class="P154"><a id="a_4_3_1_Current_Forwarding_Strategy"><span>4.3.1</span></a><a id="__RefHeading__1788_539951246"/>Current Forwarding Strategy</h3><p class="P17">The current forwarding strategy for the current syntax of <span class="T173">params</span> is best illustrated using the following example:</p><p class="P33"><span class="T79">        </span><span class="T80">WG_PP_LCLFUNCTION(func, params (</span><span class="T79">big_type const x</span><span class="T80">) )</span></p><p class="P17">will generate:</p><p class="P17"><span> <span class="T173">void interface_func(big_type x);</span></span></p><p class="P17"><span> <span class="T173">void impl_func(big_type const x);</span></span></p><p class="P17">where the body of <span class="T173">interface_func</span> just calls impl_func(x)</p><p class="P17">The rationale for <span class="T173">interface_func</span>'s signature <span class="T196">are</span>:</p><ol><li><p class="P116" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">a)</span><span class="T111">Because the</span><span class="T79"> token "</span><span class="T149">big_type const x</span><span class="T79">" is not PP parseable, only TMP </span><span class="T111">techniques are left to</span><span class="T79"> deduce </span><span class="T111">its type</span><span class="T79">. And the only relevant tool available is</span><span class="T81"> </span><span class="T63">function_types::parameter_types</span><span class="T81">, where the latter can</span><span class="T111"> and/or </span><span class="T81">does strip off the top most const qualifier. (Remember, BOOST_TYPEOF is by default not used unless explicitly specified by the user, and in this case is certainly not needed.)</span><span class="T111"> Thus, the top-most const qualification of any specified local function parameter argument type is subject to being lost.</span><span class="odfLiEnd"/> </p></li><li><p class="P109" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">b)</span><span class="T196">C++ semantic equivalency with the signature specified by the user. Even though the top-most const qualification of any parameter argument type maybe stripped off for </span><span class="T181">interface_func</span><span class="T196">, its signature and the users specified signature are still equivalent under C++ rules.</span><span class="odfLiEnd"/> </p></li></ol><p class="P3"><span class="T81">The rationale for </span><span class="T150">impl</span><span class="T151">_func</span><span class="T81">'s signature is:</span></p><ol><li><p class="P110" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">a)</span>simplicity.<span class="odfLiEnd"/> </p></li><li><p class="P117" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">b)</span><span class="T83">codegen limitations. S</span><span class="T81">ince the token "</span><span class="T151">big_type const x</span><span class="T81">" is not PP parseable, there is no way to correctly optimize it's forwarding in the said signature. </span><span class="T82">This is because TMP tools will have to be used to deduce the type of the token, and any such use will result in the top most const qualifier being lost. </span><span class="T83">Which</span><span class="T82"> </span><span class="T81">in the context of </span><span class="T151">impl_func</span><span class="T81">'s </span><span class="T82">user defined scope </span><span class="T83">will result in </span><span class="T82">an incorrectly typed parameter</span><span class="T83"> potentially being used</span><span class="T82">. (That is </span><span class="T152">x</span><span class="T82">'s compiler enforced immutability should not be lost</span><span class="T83"> in the user defined </span><span class="T112">local function </span><span class="T83">scope</span><span class="T82">.)</span><span class="odfLiEnd"/> </p></li><li><p class="P118" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">c)</span><span class="T83">compiler optimizations. I</span><span class="T82">t is assumed the compiler will optimize away the extra copy at </span><span class="T152">impl_func</span><span class="T82">'s call site in </span><span class="T152">interface_fun</span><span class="T82">c's definition since the latter's code just literally consists of forwarding parameter arguments to </span><span class="T113">the former</span><span class="T82">.</span><span class="odfLiEnd"/> </p></li></ol><h3 class="P155"><a id="a_4_3_2_Alternative_Forwarding_Strategy_with_Alternative_param-tuple_Syntax"><span>4.3.2</span></a><a id="__RefHeading__1790_539951246"/>Alternative Forwarding Strategy with Alternative <span class="T134">param-tuple</span> Syntax</h3><p class="P18">It is possible to efficiently forward <span class="T173">interface_func</span>'s parameter arguments to <span class="T173">impl_func</span> if the former's parameter types were exactly deducible. To this end we could modify the <span class="T173">param-tuple</span> syntax to delimit the parameter type from the parameter name along the lines of the following:</p><p class="P4"><span class="T84">        </span><span class="T153">WG_PP_LCLFUNCTION(func, params (</span><span class="T154">type(</span><span class="T149">big_type const</span><span class="T154">)</span><span class="T149"> x</span><span class="T153">) )</span></p><p class="P18">This will allow us to generate:</p><p class="P18"><span> <span class="T173">void interface_func(big_type const x);</span></span></p><p class="P18"><span> <span class="T173">void impl_func(big_type const &amp; x);</span></span></p><p class="P18">which correctly and efficiently forwards <span class="T173">interface_func</span>'s parameter arguments to impl_func. (This is possible because during the preprocessing phase we are able to parse the exact type of <span class="T173">x</span> and, hence, manipulate it accordingly when generating code.)</p><p class="P4"><span class="T84">This syntax was considered and implemented at one point but was considered too unwieldy and not worth the unproven benefits of </span><span class="T85">efficient</span><span class="T84"> forwarding.</span></p><h2 class="P139"><a id="a_4_4_this__const_Qualified_Bound_Function_Variables"><span>4.4</span></a><a id="__RefHeading__1452_695783189"/><span class="T182">this_ const</span><span class="T200"> Qualified Bound Function Variables</span></h2><p class="P56"><span class="T115">The </span><span class="T161">const</span><span class="T115"> qualification of </span><span class="T127">an implicitly typed </span><span class="T161">this_</span><span class="T115"> bound function variable applies to the pointed-to-</span><span class="T115">type of </span><span class="T161">this_</span><span class="T115"> because its type, and hence the type of </span><span class="T161">this</span><span class="T115">, are already </span><span class="T161">const</span><span class="T115"> qualified. Not only would it be redundant, but it would also be impossible to </span><span class="T161">const</span><span class="T115"> qualify </span><span class="T116">the pointed-to-type of </span><span class="T115">an implicitly typed </span><span class="T161">this_</span><span class="T115"> had the constness </span><span class="T116">been </span><span class="T115">applied to the pointer type</span><span class="T116">.</span></p><h1 class="P123"><a id="a_5_Tutorial_and_Examples"><span>5</span></a><a id="__RefHeading__22112_1020142234"/>Tutorial and Examples</h1><h2 class="P140"><a id="a_5_1_Params"><span>5.1</span></a><a id="__RefHeading__2141_1372831738"/>Params</h2><p class="P60">The following is a local function with no internal state nor with any <span class="T222">internal</span> variables:</p><p class="P60"> </p><p class="P81"><span class="T220">int</span><span class="T217"> force = 0;</span></p><p class="P68"><span class="T220">int</span><span class="T217"> </span><span class="T220">const</span><span class="T217"> mass = 10;</span></p><p class="P68"><span class="T220">int</span><span class="T217"> </span><span class="T220">const</span><span class="T217"> velocity = 2;</span></p><p class="P62"> </p><p class="P72">WG_LCLFUNCTION</p><p class="P72">(calculateForce,</p><p class="P68"><span class="T217">  params (</span><span class="T218">int &amp;</span><span class="T217"> force, </span><span class="T218">int </span><span class="T220">const</span><span class="T217"> mass, </span><span class="T218">int </span><span class="T220">const</span><span class="T217"> velocity) )</span></p><p class="P72">{</p><p class="P73">  force = mass * velocity;</p><p class="P75">}</p><p class="P75">WG_LCLFUNCTION_END</p><p class="P69"> </p><p class="P70"><span class="T217">calculateForce</span><span class="T219">(force, mass, velocity);</span></p><p class="P71"><span class="T219">E</span><span class="T217">XPECT_EQ(20, force);</span></p><p class="P59"> </p><h2 class="P141"><a id="a_5_2_Varbind"><span>5.2</span></a><a id="__RefHeading__2143_1372831738"/>Varbind</h2><p class="P60">The following is a local function with all its<span class="T223"> internal</span> variables bound:</p><p class="P60"> </p><p class="P82">int force = 0;</p><p class="P82">int const mass = 10;</p><p class="P82">int const velocity = 2;</p><p class="P82"> </p><p class="P82">WG_LCLFUNCTION</p><p class="P82">(calculateForce, varbind (ref force, const mass, const velocity) )</p><p class="P82">{</p><p class="P82">}</p><p class="Standard"><span class="T173">WG_LCLFUNCTION_END</span>;</p><p class="Standard"> </p><p class="P85">calculateForce();</p><p class="P74">EXPECT_EQ(20, force);</p><p class="P85"> </p><h2 class="P142"><a id="a_5_3_Varset"><span>5.3</span></a><a id="__RefHeading__2145_1372831738"/>Varset</h2><p class="P61">The following is a local function with<span class="T223"> its internal variable set by the user</span>:</p><p class="P61"> </p><p class="P83">WG_LCLFUNCTION<span class="T221">(accumulate, return(int) varset (sum, 0) )</span></p><p class="P84">{</p><p class="P84">  <span class="T224">return </span>++sum;</p><p class="P84">}</p><p class="P84">WG_LCLFUNCTION_END;</p><p class="P84"> </p><p class="P84">int sum = accumulate();</p><p class="P84">EXPECT_EQ(1, sum);</p><h1 class="P124"><a id="a_6_Future_Features"><span>6</span></a><a id="__RefHeading__1442_695783189"/>Future Features</h1><h2 class="P143"><a id="a_6_1_Auto_Assign_Syntax"><span>6.1</span></a><a id="__RefHeading__3633_514162716"/>Auto Assign Syntax</h2><p class="P19">Consider support for the following syntax:</p><p class="P51"><span class="T118">        </span><span class="T163">auto accum = </span></p><p class="P52"><span class="T163">          </span><span class="T153">WG_PP_LCLFUNCTION(</span><span class="T163">return(int) params(int val) varset(</span><span class="T165">tally</span><span class="T164">, 0</span><span class="T163">))</span></p><p class="P34"><span>   { ... }</span></p><p class="P52"><span class="T164">          </span><span class="T153">WG_PP_LCLFUNCTION</span><span class="T164">_END</span><span class="T118"> </span></p><h2 class="P144"><a id="a_6_2_make_ref_make_cref"><span>6.2</span></a><a id="__RefHeading__1866_929216580"/><span class="T184">make_ref</span><span class="T204">/</span><span class="T183">make_cref</span></h2><p class="P25">Creates a reference wrapper for local function objects for use with STL algorithms were the user wants to ensure reference semantics for any and all copies.</p><h1 class="P125"><a id="a_7_Open_Issues"><span>7</span></a><a id="__RefHeading__1848_929216580"/>Open Issues</h1><h2 class="P145"><a id="a_7_1_Exception_Specifications"><span>7.1</span></a><a id="__RefHeading__1850_929216580"/>Exception Specifications</h2><p class="P53"><span class="T119">Does it make sense to support exception specifications, especially in light of the fact that the user defined local function will always be called through a global proxy type whose function operator's exception specification can never be fully generalized.</span><span class="T120"> For example, even if the local function supported </span><span class="T171">noexcept(blah)</span><span class="T120">, what good will that do if its proxy's function operator did not support that?</span></p><h1 class="P126"><a id="a_8_Alternatives"><span>8</span></a><a id="__RefHeading__1852_929216580"/>Alternatives</h1><h2 class="P146"><a id="a_8_1_Boost_Local_Function"><span>8.1</span></a><a id="__RefHeading__1854_929216580"/>Boost.Local_Function</h2><h3 class="P168"><a id="a_8_1_1_Differences_"><span>8.1.1</span></a><a id="__RefHeading__1856_929216580"/>Differences:</h3><ol><li><p class="P87" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">1.</span>This library allows the function name to be specified at and only at the<span class="T210"> </span>top of the local function declaration.<span class="odfLiEnd"/> </p></li><li><p class="P87" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">2.</span>This library allows local functions to maintain internal state without referencing external variables (via varset).<span class="odfLiEnd"/> </p></li><li><p class="P90" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">3.</span>This library allows the use of globally scoped types as macro parameters, i.e., <span class="T173">::std::pair&lt;..., ...&gt;</span>.<span class="odfLiEnd"/> </p></li><li><p class="P87" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">4.</span>This library uses a different syntax.<span class="odfLiEnd"/> </p></li><li><p class="P87" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">5.</span>This library does not have default parameters, unlike Boost::LocalFunction. In the author's view it adds too little expressivity to be worth the effort to implement.<span class="odfLiEnd"/> </p></li><li><p class="P88" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">6.</span><span class="T211">This library does not allow the keyword </span><span class="T179">this</span><span class="T211"> to be misused in a local function definition.</span><span class="odfLiEnd"/> </p></li><li><p class="P91" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">7.</span>This library does not require any special syntax to make a local function recursive.<span class="odfLiEnd"/> </p></li><li><p class="P92" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">8.</span>Same line multiple definitions of local functions do not require any special handling.<span class="odfLiEnd"/> </p></li><li><p class="P89" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">9.</span><span class="T212">This library does not support exception specifications. For reasons why see the </span><a href="#a_Open_Issues" class="Internet_20_link"><span class="T212">Open Issues </span></a><a href="#a_Section" class="Internet_20_link"><span class="T212">Section</span></a><span class="T212">.</span><span class="odfLiEnd"/> </p></li><li><p class="P87" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">10.</span><span class="T213">This library does not support the </span><span class="T180">inline</span><span class="T213"> keyword. In the author's view this is redundant, any local function will automatically be defined within a class definition, hence, it would already be implicitly inline.</span><span class="odfLiEnd"/> </p></li><li><p class="P119" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">11.</span>In the author's humble opinion this library has a much cleaner implementation.<span class="odfLiEnd"/> </p><ol><li><p class="P87" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">1.</span>The preprocessor translator is partitioned into a front end and back end. <span class="odfLiEnd"/> </p></li><li><p class="P87" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">2.</span>A well-defined symbol table bridg<span class="T215">es</span> the two translation layers.<span class="odfLiEnd"/> </p></li><li><p class="P87" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">3.</span><span class="T215">It has</span> well-defined error-generating mechanism with a sep<span class="T214">a</span>rate error pass before code generation.<span class="odfLiEnd"/> </p></li></ol></li></ol><h1 class="P129"><a id="a_9_Acknowledgments"><span>9</span></a><a id="__RefHeading__1858_929216580"/>Acknowledgments</h1><h2 class="P147"><a id="a_9_1_Boost_Preprocessor"><span>9.1</span></a><a id="__RefHeading__1860_929216580"/>Boost.Preprocessor</h2><p class="P20">This library would not have been possible without the invaluable tools of Boost.Preprocessor.</p><h2 class="P147"><a id="a_9_2_Boost_Local_Function"><span>9.2</span></a><a id="__RefHeading__1862_929216580"/>Boost.Local_Function</h2><p class="P54"><span class="T121">Boost.Local_Function was invaluable in driving the specification</span><span class="T122">s of</span><span class="T121"> this library.</span></p><p class="P80"> </p></body></html>