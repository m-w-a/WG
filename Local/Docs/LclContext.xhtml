<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by LibreOffice - see http://cgit.freedesktop.org/libreoffice/core/tree/filter/source/xslt for the code.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="en-US">- no title specified</title><meta name="DCTERMS.title" content="" xml:lang="en-US"/><meta name="DCTERMS.language" content="en-US" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.issued" content="2014-07-17T01:07:29.616000000" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.modified" content="2015-08-06T13:49:23.563000000" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.provenance" content="" xml:lang="en-US"/><meta name="DCTERMS.subject" content="," xml:lang="en-US"/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:12pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.fr1 { border-width:0.0133cm; border-style:solid; border-color:#000000; font-size:12pt; margin-bottom:0.0791in; margin-left:0.0791in; margin-right:0.0791in; margin-top:0.0791in; padding:0.0591in; font-family:Liberation Serif; vertical-align:top; writing-mode:lr-tb; }
	.Contents_20_1 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-indent:0in; }
	.Contents_20_2 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0.1965in; margin-right:0in; text-indent:0in; }
	.Contents_20_3 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0.3929in; margin-right:0in; text-indent:0in; }
	.Contents_20_Heading { font-size:16pt; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-indent:0in; font-weight:bold; }
	.Heading_20_3 { font-size:12pt; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; font-weight:bold; }
	.P1 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P10 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P100 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P101 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P102 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P103 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P104 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P105 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P106 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P107 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P108 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P109 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P11 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P110 { font-size:12pt; font-style:italic; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P111 { font-size:12pt; margin-left:0in; margin-right:0in; text-indent:0in; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P112 { font-size:12pt; margin-left:0.1965in; margin-right:0in; text-indent:0in; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P113 { font-size:12pt; margin-left:0.3929in; margin-right:0in; text-indent:0in; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P114 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P115 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P116 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P117 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P118 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P119 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P12 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P120 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P121 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P122 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P123 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P124 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P125 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P126 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P127 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P128 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P129 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P13 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P130 { font-size:14pt; font-style:normal; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; text-decoration:none ! important; }
	.P131 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P132 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P133 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; font-style:normal; }
	.P134 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; font-style:normal; }
	.P135 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; font-style:normal; }
	.P136 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P137 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P138 { font-size:115%; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P139 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P14 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P140 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; font-style:normal; }
	.P141 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; font-style:normal; }
	.P142 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; font-style:normal; }
	.P143 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P144 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P145 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P146 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P147 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P148 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P149 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P15 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P150 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P151 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P152 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P153 { font-size:12pt; font-weight:bold; margin-bottom:0.0835in; margin-top:0.1665in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P154 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P155 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P156 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P157 { font-size:10pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; }
	.P158 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; }
	.P159 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P16 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P160 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P161 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P162 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P163 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P164 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P165 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P166 { font-size:10pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; }
	.P167 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P168 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P169 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P17 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P170 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P171 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P172 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P173 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P174 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P175 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P176 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P177 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P178 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P179 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P18 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P180 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P181 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P182 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P183 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P184 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P185 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P186 { color:#000000; font-size:80%; font-style:normal; font-weight:normal; margin-bottom:0.0835in; margin-top:0.0835in; font-family:Liberation Sans; writing-mode:lr-tb; }
	.P19 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P2 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P20 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P21 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P22 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P23 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; font-style:normal; }
	.P24 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P25 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P26 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P27 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P28 { font-size:9pt; font-family:Lucida Console; writing-mode:lr-tb; color:#000000; font-style:normal; }
	.P29 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P3 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P30 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P31 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P32 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P33 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P34 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P35 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P36 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P37 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P38 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P39 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P4 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P40 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P41 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P42 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P43 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P44 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P45 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P46 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P47 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P48 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P49 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P5 { font-size:10pt; font-family:Consolas; writing-mode:lr-tb; }
	.P50 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P51 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P52 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0in; }
	.P53 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-indent:0in; }
	.P54 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-indent:0in; }
	.P55 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; margin-left:0in; margin-right:0in; text-indent:0in; }
	.P56 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P57 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P58 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P59 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P6 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; font-style:normal; }
	.P60 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; font-weight:normal; }
	.P61 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P62 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P63 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P64 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P65 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P66 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P67 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P68 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P69 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P7 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; font-style:normal; }
	.P70 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P71 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P72 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P73 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P74 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P75 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P76 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P77 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P78 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P79 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P8 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P80 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P81 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P82 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P83 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P84 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P85 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P86 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P87 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P88 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P89 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P9 { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.P90 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P91 { font-size:10pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Consolas; writing-mode:lr-tb; }
	.P92 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P93 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P94 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P95 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P96 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P97 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P98 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.P99 { font-size:12pt; font-style:normal; line-height:120%; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; }
	.Standard { font-size:12pt; font-family:Liberation Serif; writing-mode:lr-tb; }
	.Text_20_body { font-size:12pt; font-style:normal; margin-bottom:0.0972in; margin-top:0in; font-family:Times New Roman; writing-mode:lr-tb; line-height:120%; }
	.Internet_20_link { color:#000080; text-decoration:underline; }
	.T1 { font-style:normal; }
	.T10 { font-style:normal; }
	.T100 { font-style:normal; }
	.T101 { font-style:normal; }
	.T102 { font-style:normal; }
	.T103 { font-style:normal; }
	.T104 { font-style:normal; }
	.T105 { font-style:normal; }
	.T106 { font-style:normal; }
	.T107 { font-style:normal; }
	.T108 { font-style:normal; }
	.T109 { font-style:normal; }
	.T11 { font-style:normal; }
	.T110 { font-style:normal; }
	.T111 { font-style:normal; }
	.T112 { font-style:normal; }
	.T113 { font-style:normal; }
	.T114 { font-style:normal; }
	.T115 { font-style:normal; }
	.T116 { font-style:normal; }
	.T117 { font-style:normal; }
	.T118 { font-style:normal; }
	.T119 { font-style:normal; }
	.T12 { font-style:normal; }
	.T120 { font-style:normal; }
	.T121 { font-style:normal; }
	.T122 { font-style:normal; }
	.T123 { font-style:normal; }
	.T124 { font-style:normal; }
	.T125 { font-style:normal; }
	.T126 { font-style:normal; }
	.T127 { font-style:normal; }
	.T128 { font-style:normal; }
	.T129 { font-style:normal; }
	.T13 { font-style:normal; }
	.T130 { font-style:normal; }
	.T131 { font-style:normal; }
	.T132 { font-style:normal; }
	.T133 { font-style:normal; }
	.T134 { font-style:normal; }
	.T135 { font-style:normal; }
	.T136 { font-style:normal; }
	.T137 { font-style:normal; }
	.T138 { font-style:normal; }
	.T139 { font-style:normal; }
	.T14 { font-style:normal; }
	.T140 { font-style:normal; }
	.T141 { font-style:normal; }
	.T142 { font-style:normal; }
	.T143 { font-style:normal; }
	.T144 { font-style:normal; }
	.T145 { font-style:normal; }
	.T146 { font-style:normal; }
	.T147 { font-style:normal; }
	.T148 { font-style:normal; }
	.T149 { font-style:normal; }
	.T15 { font-style:normal; }
	.T150 { font-style:normal; }
	.T151 { font-style:normal; }
	.T152 { font-style:normal; }
	.T153 { font-style:normal; }
	.T154 { font-style:normal; }
	.T155 { font-style:normal; }
	.T156 { font-style:normal; }
	.T157 { font-style:normal; font-weight:normal; }
	.T158 { font-style:normal; font-weight:normal; }
	.T159 { font-style:normal; font-weight:normal; }
	.T16 { font-style:normal; }
	.T160 { font-style:normal; font-weight:normal; }
	.T161 { font-family:Consolas; }
	.T162 { font-family:Consolas; font-size:10pt; }
	.T163 { font-family:Consolas; font-size:10pt; }
	.T164 { font-family:Consolas; font-size:10pt; }
	.T165 { font-family:Consolas; font-size:10pt; }
	.T166 { font-family:Consolas; font-size:10pt; }
	.T167 { font-family:Consolas; font-size:10pt; }
	.T168 { font-family:Consolas; font-size:10pt; }
	.T169 { font-family:Consolas; font-size:10pt; }
	.T17 { font-style:normal; }
	.T170 { font-family:Consolas; font-size:10pt; }
	.T171 { font-family:Consolas; font-size:10pt; }
	.T172 { font-family:Consolas; font-size:10pt; }
	.T173 { font-family:Consolas; font-size:10pt; }
	.T174 { font-family:Consolas; font-size:10pt; }
	.T175 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T176 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T177 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T178 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T179 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T18 { font-style:normal; }
	.T180 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T181 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T182 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T183 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T184 { font-family:Consolas; }
	.T185 { font-size:10pt; }
	.T186 { font-size:10pt; font-style:normal; }
	.T187 { font-size:10pt; font-style:normal; }
	.T188 { font-family:Times New Roman; font-style:normal; font-weight:normal; }
	.T189 { font-family:Times New Roman; font-style:normal; font-weight:normal; }
	.T19 { font-style:normal; }
	.T190 { font-family:Times New Roman; font-style:normal; font-weight:normal; }
	.T191 { font-family:Times New Roman; font-style:normal; font-weight:normal; }
	.T192 { font-family:Times New Roman; font-style:normal; font-weight:normal; }
	.T193 { font-family:Times New Roman; font-style:normal; font-weight:normal; }
	.T194 { font-family:Times New Roman; font-style:normal; }
	.T195 { font-family:Times New Roman; font-style:normal; }
	.T196 { font-family:Times New Roman; font-style:normal; }
	.T197 { font-family:Times New Roman; font-style:normal; }
	.T198 { font-family:Times New Roman; font-style:normal; }
	.T199 { font-family:Times New Roman; font-style:normal; }
	.T2 { font-style:normal; }
	.T20 { font-style:normal; }
	.T200 { font-family:Times New Roman; font-style:normal; }
	.T201 { font-family:Times New Roman; font-style:normal; }
	.T202 { font-family:Times New Roman; font-style:normal; }
	.T203 { font-family:Times New Roman; font-style:normal; }
	.T204 { font-family:Times New Roman; font-style:normal; }
	.T205 { font-family:Times New Roman; font-style:normal; }
	.T206 { font-family:Times New Roman; font-style:normal; }
	.T207 { font-family:Times New Roman; font-style:normal; }
	.T208 { font-family:Times New Roman; font-style:normal; }
	.T209 { font-family:Times New Roman; font-style:normal; }
	.T21 { font-style:normal; }
	.T210 { font-family:Times New Roman; font-style:normal; }
	.T211 { font-family:Times New Roman; font-style:normal; }
	.T212 { font-family:Times New Roman; font-style:normal; }
	.T213 { font-family:Times New Roman; font-style:normal; }
	.T214 { font-family:Times New Roman; font-style:normal; }
	.T215 { font-family:Times New Roman; font-style:normal; }
	.T216 { font-family:Times New Roman; font-style:normal; }
	.T217 { font-family:Times New Roman; font-size:10pt; font-style:italic; }
	.T218 { font-family:Times New Roman; font-size:10pt; font-style:italic; }
	.T219 { font-family:Times New Roman; font-size:10pt; }
	.T22 { font-style:normal; }
	.T220 { font-family:Times New Roman; }
	.T221 { font-style:italic; }
	.T222 { font-style:italic; }
	.T223 { font-style:italic; }
	.T224 { font-style:italic; }
	.T225 { font-style:italic; }
	.T226 { font-style:italic; }
	.T227 { font-style:italic; }
	.T228 { font-style:italic; }
	.T229 { font-style:italic; }
	.T23 { font-style:normal; }
	.T230 { font-style:italic; }
	.T231 { font-style:italic; }
	.T232 { font-style:italic; }
	.T233 { font-family:Consolas; font-size:10pt; }
	.T234 { font-family:Consolas; font-size:10pt; }
	.T235 { font-family:Consolas; font-size:10pt; }
	.T236 { font-family:Consolas; font-size:10pt; }
	.T237 { font-family:Consolas; font-size:10pt; }
	.T238 { font-family:Consolas; font-size:10pt; }
	.T239 { font-family:Consolas; font-size:10pt; }
	.T24 { font-style:normal; }
	.T240 { font-family:Consolas; font-size:10pt; }
	.T241 { font-family:Consolas; font-size:10pt; }
	.T242 { font-family:Consolas; font-size:10pt; }
	.T243 { font-family:Consolas; font-size:10pt; }
	.T244 { font-family:Consolas; font-size:10pt; }
	.T245 { font-family:Consolas; font-size:10pt; }
	.T246 { font-family:Consolas; font-size:10pt; }
	.T247 { font-family:Consolas; font-size:10pt; }
	.T248 { font-family:Consolas; font-size:10pt; }
	.T249 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T25 { font-style:normal; }
	.T250 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T251 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T252 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T253 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T254 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T255 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T256 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T257 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T258 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T259 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T26 { font-style:normal; }
	.T260 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T261 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T262 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T263 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T264 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T265 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T266 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T267 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T268 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T269 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T27 { font-style:normal; }
	.T270 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T271 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T272 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T273 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T274 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T275 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T276 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T277 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T278 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T279 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T28 { font-style:normal; }
	.T280 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T281 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T282 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T283 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T284 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T285 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T286 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T287 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T288 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T289 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T29 { font-style:normal; }
	.T290 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T291 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T292 { font-family:Consolas; font-size:10pt; font-style:normal; }
	.T293 { font-family:Consolas; font-size:10pt; font-style:normal; font-weight:normal; }
	.T294 { font-family:Consolas; font-size:10pt; font-style:italic; }
	.T295 { font-family:Consolas; font-size:10pt; font-style:italic; }
	.T296 { font-family:Consolas; font-size:12pt; font-style:normal; }
	.T297 { font-family:Consolas; font-size:12pt; font-style:normal; }
	.T298 { font-family:Consolas; font-size:12pt; font-style:normal; }
	.T299 { font-family:Consolas; font-size:12pt; font-style:normal; }
	.T3 { font-style:normal; }
	.T30 { font-style:normal; }
	.T300 { font-family:Consolas; font-size:12pt; font-style:normal; }
	.T301 { font-family:Consolas; font-size:12pt; }
	.T302 { font-family:Consolas; font-size:12pt; }
	.T303 { font-family:Consolas; font-style:normal; }
	.T304 { font-family:Consolas; font-style:normal; }
	.T305 { font-family:Consolas; font-style:italic; }
	.T307 { font-weight:bold; }
	.T31 { font-style:normal; }
	.T316 { color:#000000; font-family:Consolas; font-size:10pt; font-style:normal; }
	.T317 { color:#000000; font-family:Consolas; font-size:10pt; font-style:normal; }
	.T318 { color:#000000; font-family:Consolas; font-size:10pt; }
	.T319 { color:#000000; font-family:Lucida Console; font-size:9pt; }
	.T32 { font-style:normal; }
	.T320 { color:#000000; font-family:Lucida Console; font-size:9pt; font-style:normal; }
	.T322 { vertical-align:super; font-size:58%;font-size:14pt; font-weight:bold; }
	.T323 { vertical-align:super; font-size:58%;font-size:14pt; font-weight:bold; }
	.T33 { font-style:normal; }
	.T34 { font-style:normal; }
	.T35 { font-style:normal; }
	.T36 { font-style:normal; }
	.T37 { font-style:normal; }
	.T38 { font-style:normal; }
	.T39 { font-style:normal; }
	.T4 { font-style:normal; }
	.T40 { font-style:normal; }
	.T41 { font-style:normal; }
	.T42 { font-style:normal; }
	.T43 { font-style:normal; }
	.T44 { font-style:normal; }
	.T45 { font-style:normal; }
	.T46 { font-style:normal; }
	.T47 { font-style:normal; }
	.T48 { font-style:normal; }
	.T49 { font-style:normal; }
	.T5 { font-style:normal; }
	.T50 { font-style:normal; }
	.T51 { font-style:normal; }
	.T52 { font-style:normal; }
	.T53 { font-style:normal; }
	.T54 { font-style:normal; }
	.T55 { font-style:normal; }
	.T56 { font-style:normal; }
	.T57 { font-style:normal; }
	.T58 { font-style:normal; }
	.T59 { font-style:normal; }
	.T6 { font-style:normal; }
	.T60 { font-style:normal; }
	.T61 { font-style:normal; }
	.T62 { font-style:normal; }
	.T63 { font-style:normal; }
	.T64 { font-style:normal; }
	.T65 { font-style:normal; }
	.T66 { font-style:normal; }
	.T67 { font-style:normal; }
	.T68 { font-style:normal; }
	.T69 { font-style:normal; }
	.T7 { font-style:normal; }
	.T70 { font-style:normal; }
	.T71 { font-style:normal; }
	.T72 { font-style:normal; }
	.T73 { font-style:normal; }
	.T74 { font-style:normal; }
	.T75 { font-style:normal; }
	.T76 { font-style:normal; }
	.T77 { font-style:normal; }
	.T78 { font-style:normal; }
	.T79 { font-style:normal; }
	.T8 { font-style:normal; }
	.T80 { font-style:normal; }
	.T81 { font-style:normal; }
	.T82 { font-style:normal; }
	.T83 { font-style:normal; }
	.T84 { font-style:normal; }
	.T85 { font-style:normal; }
	.T86 { font-style:normal; }
	.T87 { font-style:normal; }
	.T88 { font-style:normal; }
	.T89 { font-style:normal; }
	.T9 { font-style:normal; }
	.T90 { font-style:normal; }
	.T91 { font-style:normal; }
	.T92 { font-style:normal; }
	.T93 { font-style:normal; }
	.T94 { font-style:normal; }
	.T95 { font-style:normal; }
	.T96 { font-style:normal; }
	.T97 { font-style:normal; }
	.T98 { font-style:normal; }
	.T99 { font-style:normal; }
	<!-- ODF styles with no properties representable as CSS -->
	.Sect1 .Index_20_Link .Numbering_20_Symbols .T306 .T308 .T309 .T310 .T311 .T312 .T313 .T314 .T315 .T321 .T324 .T325 .T326 .T327 .T328 .T329 .T330 .T331 .T332 .T333 .T334 .T335 .T336 .T337 .T338 .T339 .T340 .T341 .T342 .T343 .T344 .T345 .T346 .T347 .T348  { }
	</style></head><body dir="ltr" style="max-width:8.5in;margin-top:0.7874in; margin-bottom:0.7874in; margin-left:0.7874in; margin-right:0.7874in; writing-mode:lr-tb; "><table border="0" cellspacing="0" cellpadding="0" class="Sect1"><colgroup/><p class="Contents_20_Heading">Table of Contents</p><tr><td><p class="P111"><a href="#__RefHeading__14049_1726513801">1Introduction</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__1091_295664061">1.1What</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__1093_295664061">1.2Why</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__1095_295664061">1.2.1Why Formalize?</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__1097_295664061">1.3How</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__4613_1561157922">1.3.1Extant</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__4622_1561157922">1.3.2Adhoc</a></p></td></tr><tr><td><p class="P111"><a href="#__RefHeading__1099_295664061">2Tutorial</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__3148_295664061">2.1A Note on Syntax</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__3150_295664061">2.1.1Named Macro Parameters</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__3177_295664061">2.2A Note on Examples</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__3179_295664061">2.3The Implementing Macros</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__1101_295664061">2.4Scope Managers</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__3187_295664061">2.5Extant Scope Managers</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__1103_295664061">2.5.1with Parameter</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__1105_295664061">2.5.2enter_as Parameter</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__1107_295664061">2.6Adhoc Scope Managers</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__3196_295664061">2.6.1with_adhoc Parameter</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__3569_2091598201">2.6.2with_raii Parameter</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__2684_1561157922">2.7Nesting STEPed Macros</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__4615_1561157922">2.8Same Line Declarations</a></p></td></tr><tr><td><p class="P111"><a href="#__RefHeading__1109_295664061">3Reference</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__3225_295664061">3.1Macros</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__3227_295664061">3.1.1WG_LCLCONTEXT(...) WG_LCLCONTEXT_TPL(...) WG_LCLCONTEXT_ENDN</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__2686_1561157922">3.1.2BOOST_NO_EXCEPTIONS</a></p></td></tr><tr><td><p class="P111"><a href="#__RefHeading__3154_295664061">4Limitations</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__4624_1561157922">4.1General Limitations</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__3266_2082572751">4.1.1Macro Parameter Arguments Containing Commas</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__4626_1561157922">4.1.2Implicitly Typed Variables</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__3185_295664061">4.1.3Noncopyable Const LValue Scope Managers</a></p></td></tr><tr><td><p class="P111"><a href="#__RefHeading__1111_295664061">5Grammar</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__1113_295664061">5.1Special Symbols</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__1115_295664061">5.2EBNF</a></p></td></tr><tr><td><p class="P111"><a href="#__RefHeading__4617_1561157922">6Rationale</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__4619_1561157922">6.1this_ const Qualification</a></p></td></tr><tr><td><p class="P111"><a href="#__RefHeading__1117_295664061">7Alternatives</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__1119_295664061">7.1Why not Boost.ScopeExit?</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__1121_295664061">7.1.1Unenforceable Intent</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__1123_295664061">7.1.2Unclear Intent</a></p></td></tr><tr><td><p class="P113"><a href="#__RefHeading__3081_318050475">7.1.3Feature Deficiency</a></p></td></tr><tr><td><p class="P111"><a href="#__RefHeading__5050_1561157922">8Implementation</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__5052_1561157922">8.1Sample STEPed Macro Use</a></p></td></tr><tr><td><p class="P112"><a href="#__RefHeading__5054_1561157922">8.2Sample STEPed Macro Expansion</a></p></td></tr></table><h1 class="P131"><a id="a_2_Introduction"><span>2</span></a><a id="__RefHeading__14049_1726513801"/>Introduction</h1><h2 class="P115"><a id="a_2_1_What"><span>2.1</span></a><a id="__RefHeading__1091_295664061"/>What</h2><p class="P61"><span class="T39">Simply</span><span class="T111"> stated,</span><span class="T1"> this library </span><span class="T2">enables</span><span class="T1"> </span><span class="T2">the use </span><span class="T1">of </span><span class="T3">the</span><span class="T2"> </span><span class="T1">Python</span><span class="T2">esque </span><span class="T250">with-</span><span class="T2">statement</span><span class="T1"> </span><span class="T2">construct in C++. More broadly, this library seeks to </span><span class="T3">formalize</span><span class="T2"> a generalized version of </span><span class="T112">a subset of the</span><span class="T2"> </span><span class="T222">RAII (Resource Acquisition is Initialization)</span><span class="T2"> idiom that</span><span class="T3">,</span><span class="T2"> for the lack of preexisting terms</span><span class="T3">,</span><span class="T2"> I shall refer here to as the </span><span class="T222">STEP</span><span class="T2"> </span><span class="T222">(Scope Triggered Event Processing)</span><span class="T2"> idiom. </span><span class="T3">The </span><span class="T223">STEP</span><span class="T3"> idiom </span><span class="T40">is </span><span class="T3">the commonly occurring use case where for a given block of code some user specified action(s) must </span><span class="T40">execute</span><span class="T3"> </span><span class="T4">on entry and on exit</span><span class="T40">,</span><span class="T3"> and</span><span class="T4"> the failure to do so will result in some deterministic behavior. </span><span class="T3"> </span><span class="T39">Some e</span><span class="T5">xamples of such use cases </span><span class="T39">are</span><span class="T5"> transactional programs where a series of steps must all be executed successfully</span><span class="T39"> or</span><span class="T5"> else all rolled back, and GUI program</span><span class="T39">s</span><span class="T5"> where it is desired to suspend animation before modifying GUI elements and resum</span><span class="T40">e</span><span class="T5"> animation thereafter.</span></p><h2 class="P116"><a id="a_2_2_Why"><span>2.2</span></a><a id="__RefHeading__1093_295664061"/>Why</h2><h3 class="P140"><a id="a_2_2_1_Why_Formalize?"><span>2.2.1</span></a><a id="__RefHeading__1095_295664061"/>Why Formalize?</h3><p class="P62"><span class="T1">The constructs identified by the </span><span class="T221">STEP</span><span class="T1"> idiom usually entail boilerplate code before and after </span><span class="T6">some scope. Not only is it repetitive and tedious to reproduce </span><span class="T7">the boilerplate </span><span class="T6">code by hand, it is also error prone</span><span class="T7"> since it's easy to get it almost</span><span class="T41">,</span><span class="T7"> but not quite</span><span class="T41">,</span><span class="T7"> right through copy-and-past errors. Formalization takes care of the boilerplate code, allowing the programmer to focus</span><span class="T8"> on the task at hand</span><span class="T7">. And when done </span><span class="T41">correctly</span><span class="T7">, formalization makes for more readable and maintainable code by clearly conveying and enforcing the intent of the formalized idiom.</span></p><h2 class="P117"><a id="a_2_3_How"><span>2.3</span></a><a id="__RefHeading__1097_295664061"/>How</h2><p class="P97"><span class="T20">T</span><span class="T17">he macros </span><span class="T253">WG_LCL_CONTEXT</span><span class="T18">/</span><span class="T253">WGLCLCONTEXT_TPL</span><span class="T17">/</span><span class="T253">WG_LCLCONTEXT_END</span><span class="T217">N</span><span class="T253"> </span><span class="T17">are used to implement the </span><span class="T225">STEP</span><span class="T17"> idiom</span><span class="T23"> in this library.</span><span class="T136"> Associated with the use of these macros are scope managers. Loosely, scope managers are any objects with a no-argument method named </span><span class="T283">enter</span><span class="T136">, and one-argument method named </span><span class="T283">exit</span><span class="T136">. </span><span class="T137">For the scope defined in between the macro invocations of </span><span class="T253">WG_LCL_CONTEXT</span><span class="T18">/</span><span class="T253">WGLCLCONTEXT_TPL</span><span class="T137"> and </span><span class="T253">WG_LCLCONTEXT_END</span><span class="T217">N</span><span class="T137">, it is guaranteed that the </span><span class="T284">enter</span><span class="T137"> method of any associated scope managers will be called in the order that the scope managers were declared in the "</span><a href="#a_opening_macro" class="Internet_20_link"><span class="T139">opening macro</span></a><span class="T137">", and that the </span><span class="T284">exit</span><span class="T137"> method of those same scope managers will be called in the reverse of the said order. If such a scope is exited "</span><a href="#a_prematurely" class="Internet_20_link"><span class="T139">prematurely</span></a><span class="T137">", then the said </span><span class="T284">exit</span><span class="T137"> methods will be called with the boolean value </span><span class="T284">false</span><span class="T137">, else they will be called with the boolean value </span><span class="T284">true</span><span class="T137">.</span><span class="T138"> In addition, it is also possible to create on-the-fly scope managers using variables bound from the enclosing scope. Such scope managers are called adhoc scope managers whereas the other ones are called extant scope managers. </span></p><p class="P97"><span class="T138">The following examples should give a quick overview of how these macros </span><span class="T140">can be </span><span class="T138">used.</span></p><h3 class="P143"><a id="a_2_3_1_Extant"><span>2.3.1</span></a><a id="__RefHeading__4613_1561157922"/><span class="T138">E</span><span class="T1">xtant</span></h3><p class="P24"><span class="T249">  </span><span class="T286">template &lt;typename StreamOrBuf&gt;<br/></span><span class="T249">  </span><span class="T286">struct FileMngr<br/></span><span class="T249">  </span><span class="T286">{<br/>  </span><span class="T249">  </span><span class="T286">explicit FileMngr(char const * pFilepath)<br/>  </span><span class="T249">  </span><span class="T286">: m_Filepath(pFilepath),<br/>    </span><span class="T249">  </span><span class="T286">m_StreamOrBuf()<br/></span><span class="T249">  </span><span class="T286">  {}<br/>  <br/>  </span><span class="T249">  </span><span class="T286">StreamOrBuf &amp; enter()<br/></span><span class="T249">  </span><span class="T286">  {<br/>  </span><span class="T249">  </span><span class="T286">  m_StreamOrBuf.open(m_Filepath.c_str());<br/>    </span><span class="T249">  </span><span class="T286">return m_StreamOrBuf;<br/></span><span class="T249">  </span><span class="T286">  }<br/>  </span><span class="T249">  </span><span class="T286"><br/></span><span class="T249">  </span><span class="T286">  void exit(bool const scope_completed)<br/>  </span><span class="T249">  </span><span class="T286">{<br/>    </span><span class="T249">  </span><span class="T286">(void)scope_completed;<br/></span><span class="T249">  </span><span class="T286">    m_StreamOrBuf.close();<br/>  </span><span class="T249">  </span><span class="T286">}<br/></span><span class="T249">  </span><span class="T286">  <br/></span><span class="T249">  </span><span class="T286">private:<br/>  </span><span class="T249">  </span><span class="T286">std::string m_Filepath;<br/></span><span class="T249">  </span><span class="T286">  StreamOrBuf m_StreamOrBuf;<br/></span><span class="T249">  </span><span class="T286">};<br/></span><span class="T249">  </span><span class="T286"><br/></span><span class="T249">  </span><span class="T286">void write()<br/></span><span class="T249">  </span><span class="T286">{<br/>  </span><span class="T249">  </span><span class="T286">WG_LCLCONTEXT( <br/>    </span><span class="T249">  </span><span class="T286">with(FileMngr&lt;std::ofstream&gt;("tmp.bin")) enter_as(ref filestrm) )</span></p><p class="P24"><span class="T287">    // Scope1</span><span class="T286"><br/></span><span class="T249">  </span><span class="T286">  {<br/>  </span><span class="T249">  </span><span class="T286">  // Write to filestrm ...<br/></span><span class="T249">  </span><span class="T286">  }<br/>  </span><span class="T249">  </span><span class="T286">WG_LCLCONTEXT_END1<br/></span><span class="T249">  </span><span class="T286">}</span></p><p class="P17"> </p><p class="P98">In the function <span class="T234">write</span>, an anonymous scope manager is associated with the opening macro and upon entry into <span class="T234">Scope1</span> its <span class="T234">enter</span> method is invoked<span class="T336">,</span> the result of that method invocation is then captured by reference and made available in Scope1 via the variable <span class="T234">filestrm</span>.<span class="T337"> Upon exit from Scope1, for any reason whatsoever, the </span><span class="T246">exit</span><span class="T337"> method of that anonymous scope manager will then be invoked.</span></p><h3 class="P144"><a id="a_2_3_2_Adhoc"><span>2.3.2</span></a><a id="__RefHeading__4622_1561157922"/><span class="T140">A</span><span class="T1">dhoc</span></h3><p class="P19">  Transaction transaction;<br/>  <br/>  WG_LCLCONTEXT(<br/>    with_adhoc (ref transaction) <br/>      on_enter(transaction.start();)<br/>      on_exit( <br/>        if(! scope_completed) {transaction.rollback();} <br/>        else { transaction.commit(); }) )</p><p class="P13"><span class="T142">  // Scope1</span><span class="T141"><br/>  {<br/>    // record transactions.<br/>  }<br/>  WG_LCLCONTEXT_END1</span></p><p class="P13"> </p><p class="P99"><span class="T141">A</span><span class="T1">bove, an anonymous scope manager object is created on-the-fly with a reference to the previously declared </span><span class="T249">transaction</span><span class="T1"> object. Upon entry into </span><span class="T249">Scope1</span><span class="T1">, said scope manager will execute the snippet of code specified in the </span><span class="T249">on_enter</span><span class="T1"> </span><span class="T143">named </span><span class="T1">parameter, and upon exit </span><span class="T143">from that scope, for any reason whatsoever, it will execute the code snippet specified in the </span><span class="T288">on_exit</span><span class="T143"> named parameter.</span></p><h1 class="P132"><a id="a_3_Tutorial"><span>3</span></a><a id="__RefHeading__1099_295664061"/><span class="T19">T</span><span class="T20">utorial</span></h1><h2 class="P118"><a id="a_3_1_A_Note_on_Syntax"><span>3.1</span></a><a id="__RefHeading__3148_295664061"/>A Note on Syntax</h2><h3 class="P145"><a id="a_3_1_1_Named_Macro_Parameters"><span>3.1.1</span></a><a id="__RefHeading__3150_295664061"/><span class="T44">N</span><span class="T1">amed Macro Parameters</span></h3><p class="P70"><span class="T1">This library uses named parameters to pass arguments to </span><span class="T68">the </span><span class="T1">macros</span><span class="T68"> that implement it</span><span class="T1">. It is this author's opinion that this makes such macros clearer to understand and easier to use. </span><span class="T88">Three</span><span class="T46"> </span><span class="T1">types of named macro parameters</span><span class="T50"> are used</span><span class="T1">, those that expect value expressions</span><span class="T50">,</span><span class="T1"> those that</span><span class="T88"> expect</span><span class="T1"> </span><span class="T92">bound </span><span class="T89">variable</span><span class="T1"> </span><span class="T88">declarations</span><span class="T46">,</span><span class="T68"> and those that expect C++ compound statements.</span><span class="T45"> </span><span class="T98">Value expressions are C++ expressions that evaluate to some object, bound variable declarations are</span><span class="T99"> DSEL</span><span class="T98"> variable declarations whose variable identifiers bind to preexisting variables of the same name in the enclosing scope of the said declaration, and C++ compound statements are sequences of C++ statements.</span></p><h4 class="P177"><a id="a_3_1_1_1_Bound_Variable_Declarations"><span>3.1.1.1</span></a><a id="__RefHeading__3152_295664061"/><span class="T100">Bound </span><span class="T1">Variable Declarations</span></h4><p class="P71"><span class="T93">Bound v</span><span class="T90">ariable declarations</span><span class="T1"> maybe implicitly typed or explicitly typed.</span><span class="T46"> Implicitly </span><span class="T91">typed</span><span class="T93"> bound</span><span class="T91"> </span><span class="T90">variable declarations</span><span class="T46"> deduce their type from </span><span class="T93">the</span><span class="T46"> </span><span class="T90">identifier</span><span class="T93"> they bind to</span><span class="T46"> using Boost.Typeof.</span><span class="T50"> The use of Boost.Typeof library is not strictly necessary, those that wish to forgo its use can explicitly type their </span><span class="T94">bound variable declarations</span><span class="T50">.</span></p><!--Next 'div' was a 'text:p'.--><div class="P71"><!--Next 'div' is emulating the top hight of a draw:frame.--><!--Next '
			div' is a draw:frame.
		--><div style="width:6.7819in; padding:0;  float:left; position:relative; left:0.1519cm; " class="fr1" id="Frame4"><!--Next 'div' was a 'draw:text-box'.--><div style="min-height:0.6346in;"><p class="P53"><span class="T226">Advice:</span><span class="T46"> </span><span class="T50">It is recommended that implicitly typed </span><span class="T95">bound variable declarations</span><span class="T50"> be used wherever possible. This relieves the burden of having to manually keep the type of the</span><span class="T95"> binder in the</span><span class="T50"> named macro parameter argument and the type of its </span><span class="T95">bindee</span><span class="T50"> in sync, thus resulting in more maintainable code.</span><span class="T96"> Note that a binder/bindee type mismatch will not always result in a compiler error. This is true </span><span class="T97">for the case where there exists a</span><span class="T113">n implicit</span><span class="T97"> conversion sequence from the bindee to the binder.</span></p></div></div></div><div style="clear:both; line-height:0; width:0; height:0; margin:0; padding:0;"> </div><h4 class="P178"><a id="a_3_1_1_2_Explicitly_Typed_Syntax"><span>3.1.1.2</span></a><span class="T50">E</span><span class="T1">xplicitly Typed Syntax</span></h4><p class="P72"><span class="T157">The syntax for an explicit</span><span class="T159">l</span><span class="T157">y typed </span><span class="T160">variable declaration </span><span class="T157">is:</span></p><p class="P72"><span class="T162">  </span><span class="T169">type</span><span class="T162">( non-local-type-specifier )</span></p><p class="P72"><span class="T157">Where </span><span class="T158">the </span><span class="T159">appropriate terms are defined </span><a href="#a_here" class="Internet_20_link"><span class="T159">here</span></a><span class="T159">.</span></p><!--Next 'div' was a 'text:p'.--><div class="P60"><!--Next 'div' is emulating the top hight of a draw:frame.--><!--Next '
			div' is a draw:frame.
		--><div style="width:6.7819in; padding:0;  float:left; position:relative; left:0.1519cm; " class="fr1" id="Frame1"><!--Next 'div' was a 'draw:text-box'.--><div style="min-height:0.6346in;"><p class="P53"><span class="T226">Advice:</span><span class="T46"> </span><span class="T151">Note that </span><span class="T45">commas </span><span class="T151">can</span><span class="T45">not be used </span><span class="T151">in </span><span class="T101">argument</span><span class="T151">s</span><span class="T101"> to </span><span class="T274">type</span><span class="T45">. (</span><span class="T47">For rationale s</span><span class="T45">ee </span><a href="#a_Macro_Parameter_Arguments___" class="Internet_20_link"><span class="T57">Macro Parameter Arguments...</span></a><span class="T45">)</span></p></div></div></div><div style="clear:both; line-height:0; width:0; height:0; margin:0; padding:0;"> </div><h4 class="P179"><a id="a_3_1_1_3_Implicitly_Typed_Syntax"><span>3.1.1.3</span></a>Implicitly Typed Syntax</h4><p class="P73"><span class="T157">The syntax for an </span><span class="T159">im</span><span class="T157">plicit</span><span class="T159">l</span><span class="T157">y typed </span><span class="T160">variable declaration</span><span class="T157"> is:</span></p><p class="P50"><span class="T175">  const | ref | const ref</span><span class="T176"> | empty-token</span></p><p class="P110"><span class="T159">W</span><span class="T157">here </span><span class="T189">the keyword </span><span class="T293">const</span><span class="T189"> const qualifies the</span><span class="T188"> result of Boost.Typeof and </span><span class="T189">the keyword </span><span class="T293">ref</span><span class="T189"> reference</span><span class="T193"> </span><span class="T189">qualifies it</span><span class="T188">.</span></p><!--Next 'div' was a 'text:p'.--><div class="P110"><!--Next 'div' is emulating the top hight of a draw:frame.--><div style="height:0.065cm;"> </div><!--Next '
			div' is a draw:frame.
		--><div style="width:6.7819in; padding:0;  float:left; position:relative; left:0.2499cm; " class="fr1" id="Frame5"><!--Next 'div' was a 'draw:text-box'.--><div style="min-height:0.3547in;"><p class="P53"><span class="T230">Note</span><span class="T226">:</span><span class="T46"> </span><span class="T87">As a result, implicitly typed variables cannot be named </span><span class="T273">ref</span><span class="T87">.</span></p></div></div></div><div style="clear:both; line-height:0; width:0; height:0; margin:0; padding:0;"> </div><h4 class="P181"><a id="a_3_1_1_4_Other_Named_Parameter_Types"><span>3.1.1.4</span></a>Other Named Parameter Types</h4><!--Next 'div' was a 'text:p'.--><div class="P84"><!--Next 'div' is emulating the top hight of a draw:frame.--><div style="height:0.078cm;"> </div><!--Next '
			div' is a draw:frame.
		--><div style="width:6.7819in; padding:0;  float:left; position:relative; left:0.205cm; " class="fr1" id="Frame6"><!--Next 'div' was a 'draw:text-box'.--><div style="min-height:0.6346in;"><p class="P53"><span class="T226">Advice:</span><span class="T46"> </span><span class="T45">For maximal portability with C++03, it is recommended that </span><span class="T102">commas in named parameters other than those of bound variable declarations </span><span class="T45">be enclosed in an extra set of parenthesis. (</span><span class="T47">For rationale s</span><span class="T45">ee </span><a href="#a_Macro_Parameter_Arguments___" class="Internet_20_link"><span class="T57">Macro Parameter Arguments...</span></a><span class="T45">)</span></p></div></div></div><div style="clear:both; line-height:0; width:0; height:0; margin:0; padding:0;"> </div><h4 class="P182"><a id="a_3_1_1_5_Non-Variadic_Arguments"><span>3.1.1.5</span></a>Non-Variadic Arguments</h4><p class="P74"><span class="T190">For those that wish to strictly stay C++03 conformant, it is possible to forgo the use of variadic macros when using this library. In that case named macro parameters with variadic argument lists should have the latter list</span><span class="T192">, </span><span class="T190">including the enclosing parenthesis</span><span class="T192">, </span><span class="T190">replaced by a sequence of tuples where each tuple element represents an argument to the said macro. For example,</span><span class="T191"> "</span><span class="T177">named_param(x, y, z)</span><span class="T178">" </span><span class="T190">should be replaced by</span><span class="T178"> "</span><span class="T177">named_param (x) (y) (z)</span><span class="T191">".</span></p><h2 class="P119"><a id="a_3_2_A_Note_on_Examples"><span>3.2</span></a><a id="__RefHeading__3177_295664061"/>A Note on Examples</h2><p class="P75"><span class="T51">A</span><span class="T1">ll examples in this document will, whenever possible, use implicitly typed, variadic named macro parameter</span><span class="T69"> argument</span><span class="T1">s.</span></p><h2 class="P120"><a id="a_3_3_The_Implementing_Macros"><span>3.3</span></a><a id="__RefHeading__3179_295664061"/>The Implementing Macros</h2><p class="P105"><span class="T23">T</span><span class="T18">he macros </span><span class="T253">WG_LCL_CONTEXT</span><span class="T18">/</span><span class="T253">WGLCLCONTEXT_TPL</span><span class="T18"> </span><span class="T29">and </span><span class="T253">WG_LCLCONTEXT_END</span><span class="T218">N</span><span class="T18"> </span><span class="T29">start and end a scope </span><span class="T30">that upon entry executes some user specified action</span><span class="T41"> </span><span class="T30">and upon exit, for any reason whatsoever, executes some other user specified action.</span><span class="T23"> </span><span class="T115">This scope starts after the invocation of </span><span class="T253">WG_LCL_CONTEXT</span><span class="T18">/</span><span class="T253">WGLCLCONTEXT_TPL</span><span class="T115"> and ends before the invocation of </span><span class="T253">WG_LCLCONTEXT_END</span><span class="T218">N</span><span class="T115">. </span><span class="T253">WG_LCL_CONTEXT</span><span class="T18">/</span><span class="T253">WGLCLCONTEXT_TPL</span><span class="T115"> </span><span class="T117">each is said to be an</span><span class="T115"> opening macro, </span><span class="T253">WG_LCLCONTEXT_END</span><span class="T218">N</span><span class="T115"> </span><span class="T117">is said to be a</span><span class="T115"> closing macro, and</span><span class="T39"> </span><span class="T116">the scope they define</span><span class="T117"> in between them is said to be </span><span class="T116">a</span><span class="T33"> STEPed scope. </span><span class="T152"> The </span><span class="T294">N</span><span class="T152"> in </span><span class="T253">WG_LCLCONTEXT_END</span><span class="T218">N</span><span class="T152"> represents the number of </span><a href="#a_scope_managers" class="Internet_20_link"><span class="T152">scope managers</span></a><span class="T152"> declared in the opening macro.</span></p><p class="P88"><span class="T253">WG_LCL_CONTEXT</span><span class="T22"> and </span><span class="T253">WG_LCL_CONTEXT</span><span class="T254">_TPL</span><span class="T22"> </span><span class="T24">have the same fundamental functionality and the same syntax, they only differ in that the former is for use in non-template functions and the latter </span><span class="T25">is </span><span class="T24">for use in template functions</span><span class="T22">. </span><span class="T25">Fundamental to the work of</span><span class="T32"> </span><span class="T25">these macros are scope managers.</span></p><h2 class="P121"><a id="a_3_4_Scope_Managers"><span>3.4</span></a><a id="__RefHeading__1101_295664061"/>Scope Managers</h2><p class="P65"><span class="T1">Scope managers are central to this implementation of the </span><span class="T221">STEP</span><span class="T1"> idiom. </span><span class="T33">Each of the opening macros </span><span class="T253">WG_LCL_CONTEXT</span><span class="T18">/</span><span class="T253">WGLCLCONTEXT_TPL</span><span class="T33"> is associated with at least one scope manager. Scope managers</span><span class="T21"> are used to trigger user specified code whenever </span><span class="T114">a STEPed</span><span class="T21"> scope is entered and exited. </span><span class="T33">They are defined to be</span><span class="T1"> any object that has </span><span class="T26">at least one </span><span class="T31">publicly accessible </span><span class="T27">method from </span><span class="T28">each of </span><span class="T27">the following method categories</span><span class="T1">:</span></p><h4 class="P180"><a id="a_3_4_0_1_Entry_Methods"><span>3.4.0.1</span></a>Entry Methods</h4><p class="P9"><span class="T162">    some-unspecified-type enter()</span><span class="T167">;</span></p><p class="P10"><span class="T162">    some-unspecified-type enter()</span><span class="T167"> const;</span></p><h4 class="P183"><a id="a_3_4_0_2_Exit_Methods"><span>3.4.0.2</span></a>Exit Methods</h4><p class="P51"><span class="T162">    void exit(bool const </span><span class="T173">scope_completed</span><span class="T162">)</span><span class="T168">;</span></p><p class="P52"><span class="T162">    void exit(bool const </span><span class="T173">scope_completed</span><span class="T162">)</span><span class="T168"> const;</span></p><p class="P66"> </p><p class="P85"><span class="T326">Whenever a </span><span class="T21">STEP</span><span class="T326">ed scope is entered the associated scope manager(s) invoke their </span><span class="T240">enter</span><span class="T326"> method in the order in which they were declared in the opening macro; and whenever a STEPed scope is exited the associated step manager(s) invoke their </span><span class="T237">exit</span><span class="T312"> method in the reverse order in which they were declared in the opening macro. If the STEPed scope was executed prematurely, that is control was transferred from within the STEPed scope to outside of it due to the execution of a </span><span class="T237">goto</span><span class="T312">, </span><span class="T237">return</span><span class="T312">, </span><span class="T237">break</span><span class="T312">, </span><span class="T237">continue</span><span class="T312">, or </span><span class="T237">throw</span><span class="T312"> statement, then the aforementioned </span><span class="T237">exit</span><span class="T312"> method(s) will be called with the boolean value </span><span class="T241">false</span><span class="T312">, else they will be called with the boolean value </span><span class="T241">true</span><span class="T312">.</span></p><p class="P87">Note that <span class="T234">enter</span> methods are allowed to throw an exception. This means that if one does actually throw an exception, then the only <span class="T234">exit</span> methods that will subsequently be called <span class="T330">are:</span></p><ol><li><p class="P154" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">1.</span><span class="T331">the one for the throwing </span><span class="T245">enter</span><span class="T331"> method, </span><span class="odfLiEnd"/> </p></li><li><p class="P154" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">2.</span><span class="T331">those associated with any previously invoked </span><span class="T245">enter</span><span class="T331"> methods from the same opening macro,</span><span class="odfLiEnd"/> </p></li><li><p class="P155" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">3.</span>and those from any opening macro whose STEPed scope the current code may be nested in.<span class="odfLiEnd"/> </p></li></ol><p class="P86">Also note that <span class="T234">exit</span> methods are allowed to throw an exception. <span class="T327">If an </span><span class="T243">exit</span><span class="T327"> method does throw an exception, then any subsequent </span><span class="T243">exit</span><span class="T327"> methods that are slated to be invoked will still be invoked.</span></p><!--Next 'div' was a 'text:p'.--><div class="P86"><!--Next 'div' is emulating the top hight of a draw:frame.--><!--Next '
			div' is a draw:frame.
		--><div style="width:6.7819in; padding:0;  float:left; position:relative; left:0.1519cm; " class="fr1" id="Frame7"><!--Next 'div' was a 'draw:text-box'.--><div style="min-height:0.5098in;"><p class="P54"><span class="T231">Note</span><span class="T226">:</span><span class="T46"> </span><span class="T106">An </span><span class="T278">exit</span><span class="T106"> method that does throw will silently consume an</span><span class="T107">y</span><span class="T106"> active exception that originated from a</span><span class="T107">ny</span><span class="T106"> nested scope of its associated STEPed scope.</span></p></div></div></div><div style="clear:both; line-height:0; width:0; height:0; margin:0; padding:0;"> </div><p class="P79"><span class="T313">There are two types of scope managers that can be used with this library, existing scope managers and adhoc scope managers. They are each described in </span><a href="#a_Extant_Scope_Managers" class="Internet_20_link"><span class="T313">Extant Scope Managers</span></a><span class="T313"> and </span><a href="#a_Adhoc_Scope_Managers" class="Internet_20_link"><span class="T313">Adhoc Scope Managers</span></a><span class="T313">.</span></p><h2 class="P130"><a id="a_3_5_Extant_Scope_Managers"><span>3.5</span></a><a id="__RefHeading__3187_295664061"/>Extant Scope Managers</h2><h3 class="P146"><a id="a_3_5_1_with_Parameter"><span>3.5.1</span></a><a id="__RefHeading__1103_295664061"/><span class="T297">w</span><span class="T296">ith</span><span class="T1"> Parameter</span></h3><p class="P68"><span class="T21">Existing scope managers </span><span class="T34">are any objects accessible within the current scope that meet the definition of a scope manager.</span><span class="T35"> They</span><span class="T34"> are specified in the </span><span class="T255">with</span><span class="T34"> </span><span class="T60">named </span><span class="T34">parameter of their opening macro.</span><span class="T35"> </span><span class="T52">T</span><span class="T35">he </span><span class="T256">with</span><span class="T35"> statement captures by the reference</span><span class="T39"> (lvalues)</span><span class="T42">, </span><span class="T39">or by value (rvalues)</span><span class="T42">,</span><span class="T35"> the result of any C++ expression it's given and treats that captured object as a scope manager.</span><span class="T36"> </span></p><!--Next 'div' was a 'text:p'.--><div class="P68"><!--Next 'div' is emulating the top hight of a draw:frame.--><!--Next '
			div' is a draw:frame.
		--><div style="width:6.7819in; padding:0;  float:left; position:relative; left:0.1519cm; " class="fr1" id="Frame2"><!--Next 'div' was a 'draw:text-box'.--><div style="min-height:0.5098in;"><p class="P54"><span class="T228">Advice</span><span class="T226">:</span><span class="T46"> </span><span class="T42">This library is Boost.Move enabled, so it's advised that scope managers </span><span class="T149">also </span><span class="T42">be Boost.Move enabled.</span></p></div></div></div><div style="clear:both; line-height:0; width:0; height:0; margin:0; padding:0;"> </div><!--Next 'div' was a 'text:p'.--><div class="P68"><!--Next 'div' is emulating the top hight of a draw:frame.--><!--Next '
			div' is a draw:frame.
		--><div style="width:6.7819in; padding:0;  float:left; position:relative; left:0.1519cm; " class="fr1" id="Frame3"><!--Next 'div' was a 'draw:text-box'.--><div style="min-height:0.5098in;"><p class="P55"><span class="T227">Note</span><span class="T226">:</span><span class="T46"> </span><span class="T48">Non-copyable const rvalues may not be used as scope managers. That's because the latter can neither be copied nor moved. Additionally, for portability with C++03 it is recommended that non-copyable scope managers be marked as such</span><span class="T49">.</span><span class="T48"> </span><span class="T49">F</span><span class="T48">or further information see </span><a href="#a_Noncopyable____" class="Internet_20_link"><span class="T58">Noncopyable ...</span></a></p></div></div></div><div style="clear:both; line-height:0; width:0; height:0; margin:0; padding:0;"> </div><p class="Text_20_body"><span class="T53">Example</span><span class="T37">:</span></p><p class="P2">    layout_manager lmngr(widget1, widget2, widget3);</p><p class="P33">    WG_LCLCONTEXT( with(lmngr) )</p><p class="P33">    {</p><p class="P33">      widget1.x = 450;</p><p class="P33">      widget1.y = 500;</p><p class="P33">      </p><p class="P33">      widget2.height = 10;</p><p class="P33">      widget2.width = 20;</p><p class="P33">      </p><p class="P33">      widget3.color = Blue;</p><p class="P33">    }</p><p class="P33">    WG_LCLCONTEXT_END<span class="T328">1</span></p><h3 class="P147"><a id="a_3_5_2_enter_as_Parameter"><span>3.5.2</span></a><a id="__RefHeading__1105_295664061"/><span class="T298">e</span><span class="T296">nter_as</span><span class="T1"> Parameter</span></h3><p class="P76"><span class="T37">T</span><span class="T1">he return value, if any, of an extant scope manager's entry maybe captured via the </span><span class="T249">enter_as</span><span class="T1"> </span><span class="T70">named </span><span class="T38">macro </span><span class="T1">parameter</span><span class="T104">, else it is ignored</span><span class="T1">.</span><span class="T52"> The syntax for this is:</span></p><p class="P11"><span class="T162">    enter_as(</span><span class="T174">[</span><span class="T171">type-expression</span><span class="T174">]</span><span class="T162"> variable-name)</span></p><p class="P5"> </p><p class="P67">Example:</p><p class="Text_20_body"><span class="T238">    WG_LCLCONTEXT( with(filemngr("data.txt")) enter_as(file) )<br/>    {<br/>      // Process file </span><span class="T239">obj </span><span class="T238">here ...<br/>    }<br/>    WG_LCLCONTEXT_END</span><span class="T242">1</span></p><h2 class="P122"><a id="a_3_6_Adhoc_Scope_Managers"><span>3.6</span></a><a id="__RefHeading__1107_295664061"/>Adhoc Scope Managers</h2><p class="P106"><span class="T154">T</span><span class="T1">here are two type of adhoc scope managers, one designated by the </span><span class="T249">with_adhoc</span><span class="T1"> named macro parameter and the other designated by the </span><span class="T249">with_raii</span><span class="T1"> macro named parameter.</span></p><h3 class="P148"><a id="a_3_6_1_with_adhoc_Parameter"><span>3.6.1</span></a><a id="__RefHeading__3196_295664061"/><span class="T296">with</span><span class="T299">_</span><span class="T296">adhoc</span><span class="T1"> Parameter</span></h3><p class="P81"><span class="T1">Adhoc scope managers are scope managers built on the fly using whatever user specified variable </span><span class="T61">that is </span><span class="T1">visible in the current scope.</span><span class="T60"> They are specified in the </span><span class="T257">with_adhoc</span><span class="T60"> named parameter of the opening macro. The arguments to </span><span class="T257">with_adhoc</span><span class="T60"> bind those variables with the same name in the enclosing scope to the scope manager that will be built. </span></p><h4 class="P184"><a id="a_3_6_1_1_this__Argument"><span>3.6.1.1</span></a><span class="T234">this_</span> Argument</h4><p class="P81"><span class="T122">T</span><span class="T74">he identifier </span><span class="T260">this_</span><span class="T74">, if used as an argument to </span><span class="T260">with_adhoc</span><span class="T127"> and implicitly typed, </span><span class="T74">binds the </span><span class="T260">this</span><span class="T74"> variable of the enclosing scope to its associated scope manager. </span><span class="T128">If it is </span><span class="T282">const</span><span class="T128"> qualified, then the </span><span class="T282">const</span><span class="T128"> qualification will apply to the pointed-to-type</span><span class="T129"> (</span><span class="T134">see </span><a href="#a_Rationale" class="Internet_20_link"><span class="T133">Rationale</span></a><span class="T129">)</span><span class="T128">.</span></p><h4 class="P184"><a id="a_3_6_1_2_No_Arguments"><span>3.6.1.2</span></a>No Arguments</h4><p class="P81"><span class="T108">It is possible to use </span><span class="T279">with_adhoc</span><span class="T108"> with no arguments, in that case</span><span class="T123"> its proceeding</span><span class="T108"> opening and closing parenthesis must also be omitted.</span></p><p class="P58"> </p><p class="P80"><span class="T75">Following </span><span class="T261">with_adhoc</span><span class="T61">,</span><span class="T60"> at least one of </span><span class="T257">one_enter</span><span class="T60"> or </span><span class="T257">on_exit</span><span class="T60"> named parameters must be specified.</span><span class="T62"> These named parameters, collectively referred to </span><span class="T63">as </span><span class="T62">adhoc scope handlers, are said to be associated with the adhoc scope manager identified by the </span><span class="T258">with_adhoc</span><span class="T62"> named parameter that immediately </span><span class="T64">precedes</span><span class="T62"> them.</span></p><h4 class="P185"><a id="a_3_6_1_3_on_enter_Parameter"><span>3.6.1.3</span></a><a id="__RefHeading__3198_295664061"/><span class="T300">o</span><span class="T296">n_enter</span><span class="T1"> Parameter</span></h4><p class="P82"><span class="T1">If the </span><span class="T249">on_enter</span><span class="T1"> named macro parameter is specified, then </span><span class="T62">whatever statements specified </span><span class="T72">as</span><span class="T62"> its argument will be executed by its associated adhoc scope manager upon entry into the STEPed scope that immediately follows </span><span class="T71">its opening</span><span class="T62"> macro.</span><span class="T66"> Within this parameter's argument, those variables bound to its associated scope manager are available for use.</span><span class="T126"> For convenience, semicolon will always be appended to this parameter's argument.</span></p><h4 class="P186"><a id="a_3_6_1_4_on_exit_Parameter"><span>3.6.1.4</span></a><a id="__RefHeading__3200_295664061"/><span class="T304">o</span><span class="T303">n_exit</span><span class="T1"> Parameter</span></h4><p class="P94"><span class="T65">If the </span><span class="T259">on_exit</span><span class="T65"> named macro parameter is specified, then whatever statements specified as its argument will be executed by its associated adhoc scope manager upon exit, for any reason whatsoever, from the STEPed scope that immediately follows </span><span class="T72">its opening macro</span><span class="T65">.</span><span class="T66"> Within this parameter's argument, those variables bound to its associated scope manager are available for use.</span><span class="T67"> Additionally, the boolean variable </span><span class="T317">scope_completed</span><span class="T67"> is also available, indicating whether the STEPed scope exited </span><span class="T109">prematurely</span><span class="T67"> or not.</span><span class="T126"> For convenience, semicolon will always be appended to this parameter's argument.</span></p><p class="Text_20_body"><a id="__RefHeading__3202_295664061"/><span class="T67">E</span><span class="T1">xample</span><span class="T103">:</span></p><p class="Standard"><span class="T275">    File file(path);<br/><br/></span><span class="T234">    WG_LCLCONTEXT( <br/>      with_adhoc(ref file) on_enter( file.open(); ) on_exit( file.close(); )<br/>    )<br/>    {<br/>      // Process file here ...<br/>    }<br/>    WG_LCLCONTEXT_END</span><span class="T248">1</span></p><h3 class="P141"><a id="a_3_6_2_with_raii_Parameter"><span>3.6.2</span></a><a id="__RefHeading__3569_2091598201"/><span class="T301">with_</span><span class="T302">raii</span> Parameter</h3><p class="P109">Existing RAII objects maybe used by employing the <span class="T234">with_raii</span> adaptor. <span class="T234">with_raii</span> takes a single argument that must be an instantiation of a named RAII object.</p><!--Next 'div' was a 'text:p'.--><div class="P107"><!--Next 'div' is emulating the top hight of a draw:frame.--><!--Next '
			div' is a draw:frame.
		--><div style="width:6.7819in; padding:0;  float:left; position:relative; left:0.1519cm; " class="fr1" id="Frame8"><!--Next 'div' was a 'draw:text-box'.--><div style="min-height:0.6346in;"><p class="P53"><span class="T232">NOTE</span><span class="T226">:</span><span class="T46"> </span><span class="T156">The argument to </span><span class="T292">with_raii</span><span class="T156"> named macro parameter may not contain any commas since commas themselves act as preprocessor delimiters.</span></p></div></div></div><div style="clear:both; line-height:0; width:0; height:0; margin:0; padding:0;"> </div><p class="P108"><span class="T155">E</span><span class="T1">xample:</span></p><p class="P36">    WG_LCLCONTEXT( with<span class="T346">_raii</span>(<span class="T346">filemngr_t filemngr("../data.txt");</span>) )</p><p class="P47">    {</p><p class="P47">        //Do something</p><p class="P47">    }</p><p class="P49">    WG_LCLCONTEXT_END1</p><h2 class="P123"><a id="a_3_7_Nesting_STEPed_Macros"><span>3.7</span></a><a id="__RefHeading__2684_1561157922"/>Nesting STEPed Macros</h2><p class="P90"><span class="T1">STEPed macros maybe nested within one another. However, note that </span><span class="T120">a </span><span class="T1">STEPed macro with multiple scope manager arguments </span><span class="T120">is</span><span class="T1"> not equivalent to </span><span class="T120">a series of single scope manager argument </span><span class="T1">nested macro</span><span class="T120">s. That is, the following:</span></p><p class="P90"><span class="T120"> </span><span class="T280">  WG_LCLCONTEXT( with(scpmngr1) with(scpmngr2) with(scpmngr3) )<br/>  {<br/>    ...<br/>  }<br/>  WG_LCLCONTEXTEND3</span></p><p class="P89"> </p><p class="P89"><span class="T120">is </span><span class="T124">NOT</span><span class="T1"> equivalent to:</span></p><p class="P91">  WG_LCLCONTEXT( with(scpmngr1) )<br/>  {<br/>    WG_LCLCONTEXT( with(scpmngr2) )<br/>    {<br/>      WG_LCLCONTEXT( with(scpmngr3) )<br/>      {<br/>        ...<br/>      }<br/>      WG_LCLCONTEXTEND1<br/>    }<br/>    WG_LCLCONTEXTEND1<br/>  }<br/>  WG_LCLCONTEXTEND1</p><p class="P89"><span class="T120">This is because if</span><span class="T1"> </span><span class="T249">scpmngr3.enter()</span><span class="T1"> throws then in the first example above </span><span class="T249">scpmngr2.exit</span><span class="T1"> and </span><span class="T249">scpmngr3.exit</span><span class="T1"> will both be called with </span><span class="T181">scope_completed</span><span class="T182"> = true</span><span class="T118">, but in the second example they will be called with </span><span class="T181">scope_completed</span><span class="T182"> = false</span><span class="T118">.</span><span class="T119"> </span><span class="T125">Please remember that</span><span class="T119"> a STEPed scope is defined to start at the end of an opening macro invocation and end at the start of the following </span><span class="T121">non-nested </span><span class="T119">closing macro invocation.</span></p><h2 class="P124"><a id="a_3_8_Same_Line_Declarations"><span>3.8</span></a><a id="__RefHeading__4615_1561157922"/>Same Line Declarations</h2><p class="P96"><span class="T135">Multiple </span><span class="T334">STEPED macros</span><span class="T135"> may be declared on the same line, for example, as part of a larger macro definition.</span></p><h1 class="P133"><a id="a_4_Reference"><span>4</span></a><a id="__RefHeading__1109_295664061"/>Reference</h1><h2 class="P125"><a id="a_4_1_Macros"><span>4.1</span></a><a id="__RefHeading__3225_295664061"/>Macros</h2><h3 class="P149"><a id="a_4_1_1_WG_LCLCONTEXT_____WG_LCLCONTEXT_TPL_____WG_LCLCONTEXT_ENDN"><span>4.1.1</span></a><a id="__RefHeading__3227_295664061"/><span class="T303">WG_LCLCONTEXT(...)</span><span class="T1"><br/></span><span class="T303">WG_LCLCONTEXT_TPL(...)</span><span class="T1"><br/></span><span class="T303">WG_LCLCONTEXT_END</span><span class="T305">N</span></h3><p class="P83"><span class="T1">These macros start and end a STEPed scope. Their syntax is defined </span><a href="#a_here" class="Internet_20_link"><span class="T1">here</span></a><span class="T1">. </span><span class="T249">WG_LCLCONTEXT</span><span class="T1"> is for use in </span><span class="T1">non-template functions and </span><span class="T249">WG_LCLCONTEXT</span><span class="T1"> is for use in template functions. </span><span class="T153">The </span><span class="T295">N</span><span class="T153"> in </span><span class="T291">WG_LOCALCONTEXT_END</span><span class="T295">N</span><span class="T153"> must be a number that matches the number of scope managers associated with one of its opening macros. </span><span class="T1">The</span><span class="T78">se</span><span class="T1"> two aforementioned macros</span><span class="T78">, sometimes referred to as opening macros, will</span><span class="T1"> accept the following named</span><span class="T76"> parameters:</span></p><ol><li><p class="P157" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">a)</span>with(scope-manager-expr)<span class="odfLiEnd"/> </p><p class="P159" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T1">The </span><span class="T249">with</span><span class="T1"> named parameter associates the scope manager specified by its argument with its associated macro.</span><span class="T77"> </span><span class="T110">L</span><span class="T77">value expression arguments are captured by reference whereas rvalue expression arguments are captured by value. Whenever possible this library will attempt to move </span><span class="T262">with</span><span class="T78">'s </span><span class="T77">rvalue arguments before resorting to copying them.</span><span class="odfLiEnd"/> </p><p class="P160" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T77">N</span><span class="T1">on-copyable const rvalues may not be used as arguments to </span><span class="T249">with</span><span class="T1">. This is because they </span><span class="T81">can</span><span class="T1"> neither be copied nor moved.</span><span class="odfLiEnd"/> </p><p class="P176" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T79">F</span><span class="T48">or portability with C++03</span><span class="T79">,</span><span class="T48"> it is recommended that non-copyable scope managers</span><span class="T79"> follow these </span><a href="#a_guidelines" class="Internet_20_link"><span class="T80">guidelines</span></a><span class="T79">.</span><span class="odfLiEnd"/> </p></li></ol><p class="Text_20_body"><span class="T179">enter_as(</span><span class="T183">[</span><span class="T180">type-expression</span><span class="T183">]</span><span class="T179"> variable-name)</span></p><ol><li><p class="P161"><span class="T86">If present, t</span><span class="T85">he </span><span class="T265">enter_as</span><span class="T85"> named parameter must immediately follow a </span><span class="T265">with</span><span class="T85"> named parameter.</span><span class="T82"> This parameter tells its associated macro to capture the return value of its associated scope manager's </span><span class="T264">enter</span><span class="T82"> method call in the variable </span><span class="T179">variable-name</span><span class="T82">. This variable </span><span class="T84">will</span><span class="T82"> only </span><span class="T84">be </span><span class="T82">available within th</span><span class="T83">is named parameter's</span><span class="T82"> associated STEPed scope.</span><span class="T105"> If this named parameter is omitted then the return value, if any, of its associated scope manager's </span><span class="T276">enter</span><span class="T105"> method call will be ignored.</span></p><p class="P162"><span class="T105">T</span><span class="T1">he type of </span><span class="T249">variable-name</span><span class="T1"> may optionally be omitted, in which Boost.Typeof will be used to deduce its type.</span></p></li><li><p class="P158" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">b)</span><span class="T185">with_adhoc[ ( nlt-bound-var-dcln-list ) ] adhoc-scope-handlers </span><span class="T322">(V)</span><span class="odfLiEnd"/> </p><p class="P158" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T186">with_adhoc[ </span><span class="T187">nlt-</span><span class="T186">bound-tuple-seq ] adhoc-scope-handlers</span><span class="odfLiEnd"/> </p><p class="P156" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T195">The </span><span class="T266">with_adhoc</span><span class="T195"> named parameter </span><span class="T196">creates an</span><span class="T195"> </span><span class="T196">anonymous</span><span class="T195"> scope manager</span><span class="T196"> whose</span><span class="T197"> </span><span class="T267">enter</span><span class="T196"> and </span><span class="T267">exit</span><span class="T196"> methods can be customized by the </span><span class="T267">on_enter</span><span class="T196"> and </span><span class="T267">on_exit</span><span class="T196"> named parameters.</span><span class="T198"> Arguments to </span><span class="T268">with_adhoc</span><span class="T198"> bind those variables </span><span class="T199">that have the</span><span class="T198"> same name in the enclosing scope to the said scope manager</span><span class="T199">,</span><span class="T198"> making those variables accessible </span><span class="T199">to its</span><span class="T198"> handler methods.</span><span class="T200"> </span><span class="T216">T</span><span class="T200">he special identifier </span><span class="T269">this_</span><span class="T215">, if implicitly typed, </span><span class="T200">binds the </span><span class="T269">this</span><span class="T200"> variable (if there is one) of the enclosing scope to the said scope manager.</span><span class="T216"> Take note that </span><span class="T285">const</span><span class="T216"> qualification of the latter will apply to its pointed-to-type (see </span><a href="#a_Rationale" class="Internet_20_link"><span class="T216">Rationale</span></a><span class="T335">).</span><span class="odfLiEnd"/> </p><p class="P163" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T200">N</span><span class="T194">ote: at least one of </span><span class="T249">on_enter</span><span class="T194"> or </span><span class="T249">on_exit</span><span class="T194"> named parameters must follow this named parameter.</span><span class="odfLiEnd"/> </p></li><li><p class="P164" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">c)</span><span class="T162">on_enter( compound-statement )</span> <span class="odfLiEnd"/> </p><p class="P165" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T202">If present, t</span><span class="T194">he </span><span class="T249">on_enter</span><span class="T194"> named parameter must immediately follow a </span><span class="T249">with_adhoc</span><span class="T194"> named parameter. </span><span class="T201">This named parameter allows the user to customize </span><span class="T203">the </span><span class="T270">enter</span><span class="T201"> method of the</span><span class="T203"> </span><span class="T203">previously created</span><span class="T201"> anonymous scope manager</span><span class="T203">. </span><span class="T204">Please note that t</span><span class="T203">he return type of this method will always be </span><span class="T271">void</span><span class="T203">, so even if the argument to this named parameter returns, it will be ignored.</span><span class="T212"> </span><span class="T213">For convenience, semicolon will always be appended to this parameter's argument.</span><span class="odfLiEnd"/> </p></li><li><p class="P166" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">d)</span>on_exit( compound-statement )<span class="odfLiEnd"/> </p><p class="P167" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span><span class="T194">If present, the </span><span class="T249">on_exit</span><span class="T194"> named parameter must either follow a </span><span class="T249">with_adhoc</span><span class="T194"> or a </span><span class="T249">on_enter</span><span class="T194"> named parameter.</span><span class="T205"> </span><span class="T201">This named parameter allows the user to customize </span><span class="T203">the </span><span class="T272">exit</span><span class="T201"> method of the</span><span class="T203"> previously created</span><span class="T201"> anonymous scope manager</span><span class="T203">.</span><span class="T205"> Please note that the boolean </span><span class="T277">scope_completed</span><span class="T205"> variable is accessible within this named parameter's argument. Also </span><span class="T194">note that t</span><span class="T203">he return type of this method will always be </span><span class="T271">void</span><span class="T203">, so even if the argument to this named parameter returns, it will be ignored.</span><span class="T214"> </span><span class="T213">For convenience, semicolon will always be appended to this parameter's argument.</span><span class="odfLiEnd"/> </p></li></ol><p class="P93"><span class="T207">Multiple scope managers, both extan</span><span class="T208">t</span><span class="T207"> and adhoc, maybe </span><span class="T209">specified by</span><span class="T207"> an opening macro. These scope managers are captured and/or constructed in the order in which they appeared in their opening macro, and, whenever appropriate, are destructed in the reverse order.</span><span class="T210"> Upon entry into a STEPed scope, the </span><span class="T263">enter</span><span class="T210"> method of the opening macro's scope managers will be executed in the order in which those scope managers were specified, and upon exit from the said scope</span><span class="T211">, for any reason whatsoever</span><span class="T210">, the </span><span class="T263">exit</span><span class="T210"> method of said scope managers will be executed in the reverse order.</span></p><h3 class="P150"><a id="a_4_1_2_BOOST_NO_EXCEPTIONS"><span>4.1.2</span></a><a id="__RefHeading__2686_1561157922"/>BOOST_NO_EXCEPTIONS</h3><p class="P92">If this macro is defined then exception supported code will<span class="T333"> not</span> be generated.<span class="T332"> This means that if an exception is thrown from a STEPed scope, then none of the guarantees concerning premature scope exit hold for any of the associated scope managers.</span></p><h1 class="P134"><a id="a_5_Limitations"><span>5</span></a><a id="__RefHeading__3154_295664061"/>Limitations</h1><h2 class="P126"><a id="a_5_1_General_Limitations"><span>5.1</span></a><a id="__RefHeading__4624_1561157922"/>General Limitations</h2><h3 class="P151"><a id="a_5_1_1_Macro_Parameter_Arguments_Containing_Commas"><span>5.1.1</span></a><a id="__RefHeading__3266_2082572751"/><span class="T1">Macro Parameter</span><span class="T56"> Arguments </span><span class="T1">Containing Commas</span></h3><p class="P69"><span class="T150">N</span><span class="T43">on-type macro parameter argument</span><span class="T54">s</span><span class="T43"> that contain commas should be enclosed in an extra set of parenthesis. </span><span class="T1">That's because commas act as preprocessor delimiters</span><span class="T150">, thus making </span><span class="T1">it impossible </span><span class="T43">to parse such arguments</span><span class="T55"> without help from the user.</span></p><p class="P104"><span class="T55">A</span><span class="T1">s for type macro parameter arguments a very simple workaround is to use typedef aliases in their place.</span></p><h3 class="P152"><a id="a_5_1_2_Implicitly_Typed_Variables"><span>5.1.2</span></a><a id="__RefHeading__4626_1561157922"/><span class="T144">Implicitly Typed </span><span class="T1">Variables</span></h3><p class="P100"><span class="T144">Implicitly typed</span><span class="T1"> variables</span><span class="T145"> in named macro parameters</span><span class="T1"> may not be named "ref".</span></p><h3 class="P142"><a id="a_5_1_3_Noncopyable_Const_LValue_Scope_Managers"><span>5.1.3</span></a><a id="__RefHeading__3185_295664061"/>Noncopyable Const LValue Scope Managers</h3><p class="P77"><span class="T1">If a noncopyable const lvalue expression is to be used with the </span><span class="T249">with</span><span class="T1"> named parameter in C++03, then its type should be marked to indicate that it is noncopyable. There are four ways to do this:</span></p><ol><li><p class="P169" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">1.</span><span class="T1">derive said type from ::</span><span class="T249">boost::noncopyable</span><span class="T1">, or</span><span class="odfLiEnd"/> </p></li><li><p class="P168" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">2.</span><span class="T206">mark said type </span><span class="T234">BOOST_MOVABLE_BUT_NOT_COPYABLE</span><span class="T220">, or</span><span class="odfLiEnd"/> </p></li><li><p class="P168" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">3.</span>mark said type's copy constructor "= delete", or <span class="odfLiEnd"/> </p></li><li><p class="P169" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">4.</span><span class="T1">specialize </span><span class="T249">::boost::copy_constructible</span><span class="T1"> for said type.</span><span class="odfLiEnd"/> </p></li></ol><p class="P78"><span class="T1">For maximum portability, it is advised to do one of the above for all noncopyable </span><span class="T59">scope manager </span><span class="T1">types.</span></p><h1 class="P135"><a id="a_6_Grammar"><span>6</span></a><a id="__RefHeading__1111_295664061"/>Grammar</h1><h2 class="P127"><a id="a_6_1_Special_Symbols"><span>6.1</span></a><a id="__RefHeading__1113_295664061"/>Special Symbols</h2><ol><li><p class="P170" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">a)</span>[...]<span class="odfLiEnd"/> </p><p class="P170" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span>Items enclosed in square brackets denote optional grammar entries.<span class="odfLiEnd"/> </p></li><li><p class="P139" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0.635cm;">b)</span>with <span class="T344">with_raii </span>with_adhoc enter<span class="T321">_</span>as on_enter on_exit<span class="odfLiEnd"/> </p><p class="P171" style="margin-left:0cm;"><span style="display:block;float:left;min-width:0cm"><!-- --></span>These tokens are to be regarded as non-punctuation terminals.<span class="odfLiEnd"/> </p></li></ol><h2 class="P127"><a id="a_6_2_EBNF"><span>6.2</span></a><a id="__RefHeading__1115_295664061"/>EBNF</h2><p class="P1"><span class="T233">lclcontext</span><span class="T162">-usage ::=</span></p><p class="P33">  lclcontext-start-macro ( lclcontext-spec )</p><p class="P33">  compound-statement</p><p class="P33">  WG_LCLCONTEXT_END [;]</p><p class="P33"> </p><p class="P29"><span class="T162">lclcontext-start-macro </span><span class="T234">::=</span></p><p class="P33">    WG_LCLCONTEXT</p><p class="P33">  | WG_LCLCONTEXT_TPL</p><p class="P33"> </p><p class="P33">lclcontext-spec ::=</p><p class="P33">    with-dcln<span class="T348">-stmnt</span> [ lclcontext-spec ]</p><p class="P48">  | with-raii<span class="T348">-stmnt</span> [ lclcontext-spec ]</p><p class="P37">  | with-adhoc-dcln<span class="T348">-stmnt</span> [ lclcontext-spec ]</p><p class="P33"> </p><p class="P37">with-dcln<span class="T348">-stmnt</span> ::=</p><p class="P33">  with( scope-manager-expr ) [ enter_as( nlt-type-var-dcln ) ]</p><p class="P33"> </p><p class="P44">with-raii<span class="T348">-stmnt</span> ::=</p><p class="P43">  with_raii( <span class="T347">compound-statement )</span></p><p class="P33"> </p><p class="P37">with-adhoc-dcln<span class="T348">-stmnt</span> ::=</p><p class="P42">  <span class="T325">  </span>with_adhoc[ ( nlt-bound-var-dcln-list ) ] adhoc-scope-handlers <span class="T322">(V)</span></p><p class="P29"><span class="T162">  </span><span class="T172">| </span><span class="T162">with_adhoc[ </span><span class="T165">nlt-</span><span class="T162">bound-tuple-seq ] adhoc-scope-handlers</span></p><p class="P33"> </p><p class="P33">adhoc-scope-handlers ::=</p><p class="P33">  [on_enter( compound-statement )] [on_exit( compound-statement )]</p><p class="P33"> </p><p class="P41">nlt-bound-var-dcln-list ::= </p><p class="P41">    nlt-bound-<span class="T324">var-dcln</span></p><p class="P41">  | nlt-bound-var-dcln-list<span class="T324"> ,</span> nlt-bound-var-dcln</p><p class="P33"> </p><p class="P35">nlt-bound-tuple-seq ::=</p><p class="P35">    nlt-bound-tuple</p><p class="P35">  | nlt-bound-tuple-seq nlt-bound-tuple</p><p class="P35"> </p><p class="P35">nlt-bound-tuple ::=</p><p class="P35">  ( nlt-bound-var-dcln )</p><p class="P33"> </p><p class="P34">nlt-type-var-dcln ::=</p><p class="P34">    implicit-non-local-type-var-dcln</p><p class="P34">  | explicit-non-local-type-var-dcln</p><p class="P34"> </p><p class="P34">implicit-non-local-type-var-dcln ::=</p><p class="P34">  implicit-type-var-dcln</p><p class="P34"> </p><p class="P34">explicit-non-local-type-var-dcln ::=</p><p class="P4"> <span class="T314"> explicit-non-local-type</span> var-name</p><p class="P3"> </p><p class="P6"><span class="T162">implicit-type-var-dcln </span><span class="T163">:</span><span class="T162">:=</span></p><p class="P34">  implicit-type var-name</p><p class="P34"> </p><p class="P39">type-expression ::=</p><p class="P39">    explicit-non-local-type</p><p class="P40">  |<span class="T315"> implicit-type</span></p><p class="P34"> </p><p class="P6"><span class="T162">implicit-type </span><span class="T164">:</span><span class="T162">:= lib-type-qualifiers | empty-</span><span class="T170">token</span></p><p class="P34"> </p><p class="P30"><span class="T162">lib-type-qualifiers </span><span class="T164">:</span><span class="T162">:= const | ref | const ref</span></p><p class="P34"> </p><p class="P30"><span class="T162">explicit-non-local-type </span><span class="T164">:</span><span class="T162">:= </span></p><p class="P34"><span class="T161">  </span><span class="T184">type</span><span class="T161">( non-local-type-specifier )</span></p><p class="P33"> </p><p class="P46"><span class="T323">(V)</span> Requires a variadic macro supported preprocessor.</p><p class="P45">value-expression<span class="T345"> ::= A C++ expression that evaluates to a value.</span></p><p class="P33">scope-manager-expr ::= A C++ expression that evaluates to a scope manager.</p><p class="P33">compound-statement ::= See C++ standard.</p><p class="P31"><span class="T162">var-name </span><span class="T164">:</span><span class="T162">:= A C++ variable name.</span></p><p class="P31"><span class="T162">non-local-type-specifier </span><span class="T164">:</span><span class="T162">:=</span></p><p class="P33">  A type-specifier that specifies a non-local type.</p><p class="P38">empty-token ::= The token consisting of no characters.</p><h1 class="P136"><a id="a_7_Rationale"><span>7</span></a><a id="__RefHeading__4617_1561157922"/>Rationale</h1><h2 class="P128"><a id="a_7_1_this__const_Qualification"><span>7.1</span></a><a id="__RefHeading__4619_1561157922"/>this_ const Qualification</h2><p class="P95"><span class="T130">The </span><span class="T281">const</span><span class="T130"> qualification of </span><span class="T132">an implicitly typed </span><span class="T281">this_</span><span class="T132"> </span><span class="T130">bound variable applies to the pointed-to-type of </span><span class="T281">this_</span><span class="T130"> because its type, and hence the type of </span><span class="T281">this</span><span class="T130">, are already </span><span class="T281">const</span><span class="T130"> qualified. Not only would it be redundant, but it would also be impossible to </span><span class="T281">const</span><span class="T130"> qualify </span><span class="T131">the pointed-to-type of </span><span class="T130">an implicitly typed </span><span class="T281">this_</span><span class="T130"> had the constness </span><span class="T131">been </span><span class="T130">applied to the pointer type</span><span class="T131">.</span></p><h1 class="P137"><a id="a_8_Alternatives"><span>8</span></a><a id="__RefHeading__1117_295664061"/>Alternatives</h1><h2 class="P114"><a id="a_8_1_Why_not_Boost_ScopeExit?"><span>8.1</span></a><a id="__RefHeading__1119_295664061"/>Why not Boost.ScopeExit?</h2><h3 class="Heading_20_3"><a id="a_8_1_1_Unenforceable_Intent"><span>8.1.1</span></a><a id="__RefHeading__1121_295664061"/>Unenforc<span class="T309">e</span>abl<span class="T310">e</span> <span class="T311">Intent</span></h3><p class="P63"><span class="T73">U</span><span class="T12">sing</span><span class="T10"> Boost.ScopeExit to formalize the </span><span class="T224">STEP</span><span class="T10"> idiom </span><span class="T11">makes </span><span class="T15">enforcing </span><span class="T16">the idiom's</span><span class="T15"> intent impossible</span><span class="T11">.</span><span class="T12"> </span><span class="T12">This has to do with the fact that</span><span class="T13"> Boost.ScopeExit deals with</span><span class="T9"> scope exit, and not scope entry. Though the</span><span class="T73"> STEP</span><span class="T9"> </span><span class="T14">idiom can be correctly implemented</span><span class="T9"> by placing the scope entry code directly before its Boost.ScopeExit complement, the programmer has to manually ensure that this done in the right order for all such operations. For example, if for the following three objects: </span><span class="T251">a1</span><span class="T9">, </span><span class="T251">a2</span><span class="T9">,</span><span class="T12"> and</span><span class="T9"> </span><span class="T251">a3</span><span class="T9"> the method </span><span class="T252">suspend_layout</span><span class="T9"> must be called on scope entry and the method </span><span class="T252">resume_layout</span><span class="T9"> must be called on scope exit, then the programmer must ensure that they are ordered in the following manner:</span></p><p class="P8"><span class="T162">    a1.</span><span class="T252">suspend_layout</span><span class="T162">();</span></p><p class="P32"><span class="T162">    BOOST_SCOPE_EXIT(&amp;foo) { a1.</span><span class="T252">resume_layout</span><span class="T162">(); } BOOST_SCOPE_EXIT_END</span></p><p class="P32"><span class="T162">    a2.</span><span class="T252">suspend_layout</span><span class="T162">();</span></p><p class="P32"><span class="T162">    BOOST_SCOPE_EXIT(&amp;foo) { a2.</span><span class="T252">resume_layout</span><span class="T162">(); } BOOST_SCOPE_EXIT_END</span></p><p class="P32"><span class="T162">    a3.</span><span class="T252">suspend_layout</span><span class="T162">();</span></p><p class="P32"><span class="T162">    BOOST_SCOPE_EXIT(&amp;foo) { a3.</span><span class="T252">resume_layout</span><span class="T162">(); } BOOST_SCOPE_EXIT_END</span></p><p class="P32"> </p><p class="P32"><span class="T162">    </span><span class="T166">// User code goes here:</span></p><p class="P64"> </p><p class="P56">and not in the following plausible manner:</p><p class="P7"><span class="T162">    a1.</span><span class="T235">suspend_layout</span><span class="T162">();</span></p><p class="P32"><span class="T162">    a2.</span><span class="T252">suspend_layout</span><span class="T162">();</span></p><p class="P32"><span class="T162">    a3.</span><span class="T252">suspend_layout</span><span class="T162">();</span></p><p class="P32"><span class="T162">    BOOST_SCOPE_EXIT(&amp;foo) { a1.</span><span class="T252">resume_layout</span><span class="T162">(); } BOOST_SCOPE_EXIT_END</span></p><p class="P32"><span class="T162">    BOOST_SCOPE_EXIT(&amp;foo) { a2.</span><span class="T252">resume_layout</span><span class="T162">(); } BOOST_SCOPE_EXIT_END</span></p><p class="P32"><span class="T162">    BOOST_SCOPE_EXIT(&amp;foo) { a3.</span><span class="T252">resume_layout</span><span class="T162">(); } BOOST_SCOPE_EXIT_END</span></p><p class="P32"> </p><p class="P32"><span class="T162">    </span><span class="T166">// User code goes here:</span></p><p class="P56"> </p><p class="P56">since in the latter case if <span class="T234">a2.</span><span class="T236">suspend_layout</span><span class="T234">()</span> throws<span class="T306"> then </span><span class="T236">a1</span><span class="T306"> won't resume its drawing after it has been suspended.</span></p><h3 class="Heading_20_3"><a id="a_8_1_2_Unclear_Intent"><span>8.1.2</span></a><a id="__RefHeading__1123_295664061"/>Unclear Intent</h3><p class="P57">Boost.ScopeExit does not clearly convey its intent. For which scope does Boost.ScopeExit apply? The answer is implicit, it's the current scope <span class="T307">after</span> the <span class="T234">BOOST_SCOPE_EXIT_END</span> macro.<span class="T308"> In the author's opinion, a first glance at code which uses Boost.ScopeExit conveys that the specified exit-code will be executed upon exit from anywhere in the current scope and not just for the </span><span class="T229">portion</span><span class="T308"> of the current scope after Boost.ScopeExit's ending macro. Additionally, this author argues that one has to become acclimated to the latter fact in order to comfortably use Boost.ScopeExit.</span></p><h3 class="P153"><a id="a_8_1_3_Feature_Deficiency"><span>8.1.3</span></a><a id="__RefHeading__3081_318050475"/>Feature Deficiency</h3><p class="P101">With Boost.ScopeExit it is not possible to automatically determine whether its scope was exited prematurely or not.<span class="T329"> This means that writing transactional code using Boost.ScopeExit requires the programmer to manually indicate the end of scope. Granted, with this library the programmer is also required to put </span><span class="T244">WG_LCLCONTEXT_END</span><span class="T219">N</span><span class="T329"> at the end of scope, however, the difference is that in the former if the manual indicator was forgotten it may or may not result in a runtime error whereas in the latter forgetting to use </span><span class="T244">WG_LCLCONTEXT_END</span><span class="T219">N</span><span class="T329"> will always result in a compile time error.</span></p><h1 class="P138"><a id="a_9_Implementation"><span>9</span></a><a id="__RefHeading__5050_1561157922"/>Implementation</h1><p class="P102">The following is an outline of what a STEPed code might generate. The purpose of this is to inform the curious reader and aid library maintainers, but <span class="T338">it </span>is not a guarantee of what <span class="T339">the</span> implementation <span class="T339">will generate</span>.</p><h2 class="P129"><a id="a_9_1_Sample_STEPed_Macro_Use"><span>9.1</span></a><a id="__RefHeading__5052_1561157922"/>Sample STEPed Macro Us<span class="T340">e</span></h2><p class="P18">  WG_LCLCONTEXT( </p><p class="P18">    with(FileMngr&lt;std::ofstream&gt;("tmp.bin")) enter_as(ref filestrm)</p><p class="P18">    with_adhoc (ref transaction) </p><p class="P18">      on_enter(transaction.start();)</p><p class="P18">      on_exit( </p><p class="P18">        if(! scope_completed) {transaction.rollback();} </p><p class="P18">        else { transaction.commit(); }) </p><p class="P18">  )</p><p class="P18">  {</p><p class="P21">    // User code goes here.</p><p class="P18">  }</p><p class="P18">  WG_LCLCONTEXT_END2</p><p class="P59"> </p><h2 class="P129"><a id="a_9_2_Sample_STEPed_Macro_Expansion"><span>9.2</span></a><a id="__RefHeading__5054_1561157922"/>Sample STEPed Macro Expansion</h2><p class="P20">  { </p><p class="P20">    struct wgXXXlclcontextXXXtypealiaserXXXenteredas_dclns </p><p class="P20">    { </p><p class="P20">      typedef </p><p class="P25"><span class="T289">        </span><span class="T319">boost::add_reference</span></p><p class="P28">        &lt;</p><p class="P25"><span class="T320">          </span><span class="T289">BOOST_TYPEOF((FileMngr&lt;std::ofstream&gt;("tmp.bin")) . enter()) </span></p><p class="P26"><span class="T289"> </span><span class="T249">       &gt;::type</span></p><p class="P20">          type0 ; </p><p class="P20">    }; </p><p class="P20">    </p><p class="P20">    bool wgXXXlclcontextXXXdid_scope_complete = false; </p><p class="P20">    bool wgXXXlclcontextXXXautosimflag = false; </p><p class="P20">    (void)wgXXXlclcontextXXXautosimflag ; </p><p class="P20">    </p><p class="P20">    ::wg::lclcontext::detail::extant_scopemngr_proxy_t </p><p class="P20">      wgXXXlclcontextXXXscopemngrXXX0 = </p><p class="P20">        ::wg::lclcontext::detail::make_extant_scopemngr_proxy( </p><p class="P20">          WG_AUTOSIMULATOR_DETAIL_AUTOANY_EXPR_CAPTURE(</p><p class="P20">            FileMngr&lt;std::ofstream&gt;("tmp.bin"), </p><p class="P20">            wgXXXlclcontextXXXautosimflag) ) ; </p><p class="P27"><span class="T289">  </span><span class="T290">#ifndef </span><span class="T318">BOOST_NO_EXCEPTIONS</span></p><p class="P20">    try </p><p class="P20">    {</p><p class="P15"><span class="T146"> </span><span class="T1"> #endif</span></p><p class="P20">      wgXXXlclcontextXXXtypealiaserXXXenteredas_dclns::type0 filestrm = </p><p class="P20">        ::wg::lclcontext::detail::extant_scopemngr_proxy_downcast( </p><p class="P20">          wgXXXlclcontextXXXscopemngrXXX0, </p><p class="P20">          WG_AUTOSIMULATOR_DETAIL_AUTOANY_AUTOANYIMPL_DEDUCEDPTRTYPE(</p><p class="P20">            FileMngr&lt;std::ofstream&gt;("tmp.bin")) ) </p><p class="P20">        . enter&lt;wgXXXlclcontextXXXtypealiaserXXXenteredas_dclns::type0&gt;(); </p><p class="P20">        </p><p class="P20">      struct wgXXXlclclassXXXtypealiaserXXXwgXXXlclcontextXXXadhoc_scopemngr_typeXXX0XXX17 </p><p class="P20">      { </p><p class="P20">        typedef </p><p class="P20">          ::boost::add_reference&lt; BOOST_TYPEOF(transaction)) &gt;::type </p><p class="P20">            memlike0 ; </p><p class="P20">      }; </p><p class="P20">      </p><p class="P20">      class wgXXXlclcontextXXXadhoc_scopemngr_typeXXX0 : </p><p class="P20">        private ::wg::lclclass::detail::initializer </p><p class="P20">      { </p><p class="P20">      private: </p><p class="P20">        wgXXXlclclassXXXtypealiaserXXXwgXXXlclcontextXXXadhoc_scopemngr_typeXXX0XXX17::memlike0 transaction ; </p><p class="P20">        </p><p class="P20">        bool m_didcallexit ; </p><p class="P20">        </p><p class="P20">      public: </p><p class="P20">        explicit wgXXXlclcontextXXXadhoc_scopemngr_typeXXX0 ( </p><p class="P20">          ::boost::call_traits &lt; wgXXXlclclassXXXtypealiaserXXXwgXXXlclcontextXXXadhoc_scopemngr_typeXXX0XXX17::memlike0 &gt;::param_type param0 ) </p><p class="P20">        : transaction ( param0 ), </p><p class="P20">          m_didcallexit( false ) </p><p class="P20">        { this-&gt;init(); } </p><p class="P20">        </p><p class="P20">        private: </p><p class="P20">        public: </p><p class="P20">        </p><p class="P20">        void enter() </p><p class="P12"><span class="T146">        </span><span class="T1">{ transaction.start(); ; } </span></p><p class="P18">        </p><p class="P18">        void exit(bool const scope_completed) </p><p class="P18">        { </p><p class="P18">          m_didcallexit = true; (void)scope_completed; </p><p class="P18">          if(! scope_completed) {transaction.rollback();} </p><p class="P18">          else { transaction.commit(); } ; </p><p class="P18">        } </p><p class="P18">        </p><p class="P18">        ~ wgXXXlclcontextXXXadhoc_scopemngr_typeXXX0 () </p><p class="P18">        { </p><p class="P18">          if( ! m_didcallexit ) { this-&gt;exit(false); } </p><p class="P18">        } </p><p class="P18">      }; ; </p><p class="P18">      </p><p class="P18">      wgXXXlclcontextXXXadhoc_scopemngr_typeXXX0 </p><p class="P18">        wgXXXlclcontextXXXscopemngrXXX1 ( transaction ) ; </p><p class="P18">      </p><p class="P14"><span class="T147">  #ifndef </span><span class="T316">BOOST_NO_EXCEPTIONS</span></p><p class="P18">      try </p><p class="P18">      {</p><p class="P22">  #endif</p><p class="P18">        wgXXXlclcontextXXXscopemngrXXX1 . enter() ;</p><p class="P18">        {</p><p class="P18">          // User code goes here.</p><p class="P18">        }</p><p class="P18">        wgXXXlclcontextXXXdid_scope_complete = true;</p><p class="P16"><span class="T1">  </span><span class="T147">#ifndef </span><span class="T316">BOOST_NO_EXCEPTIONS</span></p><p class="P18">      } </p><p class="P18">      catch(...) </p><p class="P18">      { </p><p class="P18">        wgXXXlclcontextXXXscopemngrXXX1 . exit( </p><p class="P18">          wgXXXlclcontextXXXdid_scope_complete ); </p><p class="P18">        throw; </p><p class="P18">      } </p><p class="P12"><span class="T148">  #endif</span><span class="T1">      </span></p><p class="P18">      wgXXXlclcontextXXXscopemngrXXX1 . exit( </p><p class="P18">        wgXXXlclcontextXXXdid_scope_complete ); </p><p class="P16"><span class="T1">  </span><span class="T147">#ifndef </span><span class="T316">BOOST_NO_EXCEPTIONS</span></p><p class="P18">    } </p><p class="P18">    catch(...) </p><p class="P18">    { </p><p class="P18">      wgXXXlclcontextXXXscopemngrXXX0 . exit( </p><p class="P18">        wgXXXlclcontextXXXdid_scope_complete ); </p><p class="P18">      throw; </p><p class="P18">    } </p><p class="P23">  #endif</p><p class="P18">    wgXXXlclcontextXXXscopemngrXXX0 . exit( </p><p class="P18">      wgXXXlclcontextXXXdid_scope_complete ); </p><p class="P18">  }</p><p class="P18"> </p><p class="P103">Implementation notes:</p><ol><li><p class="P172" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">1.</span>Extant scope managers are wrapped in proxies of type <span class="T289">extant_scopemngr_proxy_t</span> so that in the proxy's destructor it will be possible to determine if the proxified scope manager's <span class="T234">exit</span> method has been invoked or not. This is needed to <span class="T341">disambiguate</span> the case of premature scope exit <span class="T234">via</span> a return statement.<span class="odfLiEnd"/> </p></li><li><p class="P173" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">2.</span>The result of user specified extant scope manager expressions are captured via the <span class="T234">WG_AUTOSIMULATOR_DETAIL_AUTOANY_EXPR_CAPTURE</span> macro. This is done so that such expressions can be specified without explicitly specifying their types and without having to use of Boost.Typeof to deduce their types.<span class="T342"> To implement this, </span><span class="T247">WG_AUTOSIMULATOR_DETAIL_AUTOANY_EXPR_CAPTURE</span><span class="T342"> borrows the techniques of Boost.Foreach.</span><span class="odfLiEnd"/> </p><p class="P174" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0cm"><!-- --></span>Because this method of capture effectively type erases the captured <span class="T343">object</span>, <span class="T234">extant_scopemngr_proxy_downcast</span> <span class="T343">must later </span>be used to <span class="T343">retrieve that object.</span><span class="odfLiEnd"/> </p></li><li><p class="P175" style="margin-left:0cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">3.</span>Adhoc scope managers are defined immediately before their use.<span class="odfLiEnd"/> </p></li></ol></body></html>