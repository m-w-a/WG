//----------
//Semantics:
//----------

Note: All terms not defined here should be referenced in AutoFunctorSpec.txt

context-manager:
  1) The type of the context manager object as specified in LCLCCONTEXT macro 
    determines whether the associated context handlers are called by const or 
    not. (Therefore any reference specification for the said type is ignored.)
    Rationale:
      The context scope is a subscope of the LCLCONTEXT macro scope, therefore 
      the context manager object is already visible in it. The only reason its 
      type needs to be specified is because it needs to call "onexit" at the end 
      of the context scope, and the only way to do this without having to require
      it to be specified in both the start and end macros is to cache a reference
      to it in some locally generated object. Unfortunately, having to specify 
      the type, either implicity or explicitly, allows for a const variation to
      creep in, thus effecting the calls to the context handlers.

adhoc-context-handlers:
  1) At least one handler must be specified.

//---
//BNF
//---

special symbols:
  [...] specifies an optional BNF expression.
terminals: with with_adhoc entered_as on_enter on_exit

lclcontext-usage :=
  lclcontext-start-macro ( lclcontext-spec )
  compound-statement
  WG_LCLCONTEXT_END [;]

lclcontext-start-macro :=
    WG_LCLCONTEXT
  | WG_LCLCONTEXT_TPL
  | WG_LCLCONTEXT_NOEX
  | WG_LCLCONTEXT_NOEX_TPL

lclcontext-spec :=
    with-dcln [ lclcontext-spec ]
  | with-set-dcln [ lclcontext-spec ]
  | with-adhoc-dcln [ lclcontext-spec ]

with-dcln :=
  with( bound-context-manager ) [ entered_as( type-var-dcln ) ]

with-set-dcln :=
  with_set( set-context-manager ) [ entered_as( type-var-dcln ) ]

bound-context-manager := 
  bound-var-dcln

set-context-manager :=
  set-var-dcln

with-adhoc-decln :=
  with_adhoc(  ) varbind bound-tuple-seq adhoc-context-handlers

adhoc-context-handlers :=
  [onenter( compound-statement )] [onexit( compound-statement )]

compound-statement := See C++ standard.

