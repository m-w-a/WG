//----------
//Semantics:
//----------

Note: All terms not defined here should be referenced in AutoFunctorSpec.txt

adhoc-scope-handlers:
  1) At least one handler must be specified.

//---
//BNF
//---

special symbols:
  [...] specifies an optional BNF expression.
terminals: with with_adhoc entered_as on_enter on_exit

lclcontext-usage :=
  lclcontext-start-macro ( lclcontext-spec )
  compound-statement
  WG_LCLCONTEXT_END [;]

lclcontext-start-macro :=
    WG_LCLCONTEXT
  | WG_LCLCONTEXT_TPL
  | WG_LCLCONTEXT_NOEX
  | WG_LCLCONTEXT_NOEX_TPL

lclcontext-spec :=
    with-dcln [ lclcontext-spec ]
  | with-adhoc-dcln [ lclcontext-spec ]

with-dcln :=
  with( scope-manager-expr ) [ entered_as( type-var-dcln ) ]

with-adhoc-decln :=
    with_adhoc [ varbind bound-tuple-seq ] adhoc-scope-handlers
  | with_adhoc( simple-declaration ) 
    [ varbind bound-tuple-seq ]
    adhoc-scope-handlers

adhoc-scope-handlers :=
  [on_enter( compound-statement )] [on_exit( compound-statement )]

scope-manager-expr := An lvalue C++ expression that evaluates to a scope manager.
compound-statement := See C++ standard.
simple-declaration := See C++ standard. 