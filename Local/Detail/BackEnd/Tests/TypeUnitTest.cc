#include <WG/Local/Detail/Tests/test.h>
#include <WG/Local/Detail/Tests/TestHelper.hh>
#include <boost/type_traits/add_const.hpp>
#include <boost/type_traits/add_reference.hpp>
#include "../Type.hh"

//Unit Tests.
#define S1 SomeGlobalType &
#define S2 local(SomeLocalType)
#define S3 localref(SomeLocalType &)

/*
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S1)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONST(S1)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDREFERENCE(S1)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONSTADDREFERENCE(S1)

WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S2)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONST(S2)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDREFERENCE(S2)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONSTADDREFERENCE(S2)

WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S3)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONST(S3)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDREFERENCE(S3)
WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONSTADDREFERENCE(S3)

//EXPECTED:
SomeGlobalType &
boost::add_const<SomeGlobalType &>::type
boost::add_reference<SomeGlobalType &>::type
boost::add_reference< boost::add_const<SomeGlobalType &>::type >::type
SomeLocalType
SomeLocalType
SomeLocalType
SomeLocalType
SomeLocalType &
SomeLocalType &
SomeLocalType &
SomeLocalType &
*/

struct SomeGlobalType {};
void testGlobalType()
{
  using namespace boost;
  typedef SomeGlobalType & S1Type;

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S1Type, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S1))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    add_const<S1Type>::type, WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONST(S1))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    add_reference<S1Type>::type, WG_PP_PARSEDTYPE_IFNONLOCAL_ADDREFERENCE(S1))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    add_reference<add_const<S1Type>::type>::type,
    WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONSTADDREFERENCE(S1))
}

void testNonRefLocalType()
{
  struct SomeLocalType {};
  typedef SomeLocalType S2Type;

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S2Type, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S2))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S2Type, WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONST(S2))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S2Type, WG_PP_PARSEDTYPE_IFNONLOCAL_ADDREFERENCE(S2))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S2Type, WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONSTADDREFERENCE(S2))
}

void testRefLocalType()
{
  struct SomeLocalType {};
  typedef SomeLocalType & S3Type;

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S3Type, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S3))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S3Type, WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONST(S3))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S3Type, WG_PP_PARSEDTYPE_IFNONLOCAL_ADDREFERENCE(S3))

  WG_PP_TESTHELPER_IS_SAME_TYPE(
    S3Type, WG_PP_PARSEDTYPE_IFNONLOCAL_ADDCONSTADDREFERENCE(S3))
}
