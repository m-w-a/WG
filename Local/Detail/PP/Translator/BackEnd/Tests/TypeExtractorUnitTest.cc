#include <boost/config.hpp>
#include <WG/Local/Tests/test.h>
#include <WG/Local/Detail/PP/Tests/Util.hh>
#include <boost/type_traits/add_const.hpp>
#include <boost/type_traits/add_reference.hpp>
#include "../TypeExtractor.hh"

//Unit Tests.
#define S1 type(SomeGlobalType &)
#define S2 lcltype(SomeLocalType *)
#define S3 lcltype(SomeLocalType *) (const)
#define S4 lcltype(SomeLocalType *) (ref)
#define S5 lcltype(SomeLocalType *) (const) (ref)

/*
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S1)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S1, 0)

WG_PP_PARSEDTYPE_LOCALTYPE_OPERAND(S2)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S2)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S2, 0)

WG_PP_PARSEDTYPE_LOCALTYPE_OPERAND(S3)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S3)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S3, 0)

WG_PP_PARSEDTYPE_LOCALTYPE_OPERAND(S4)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S4)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S4, 0)

WG_PP_PARSEDTYPE_LOCALTYPE_OPERAND(S5)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S5)
WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S5, 0)
*/

struct SomeGlobalType {};
void testGlobalType()
{
  using namespace boost;
  typedef SomeGlobalType & S1Type;

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    S1Type, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S1))

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    S1Type,
    WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S1, 0))
}

void testLocalTypeNoQual()
{
  struct SomeLocalType {};
  typedef SomeLocalType * Operand;

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand, WG_PP_PARSEDTYPE_LOCALTYPE_OPERAND(S2))

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S2))

#ifdef BOOST_NO_CXX11_VARIADIC_TEMPLATES
  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand const &,
    WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S2, 0))
#else
  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand const,
    WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S2, 0))
#endif
}

void testLocalTypeConstQual()
{
  struct SomeLocalType {};
  typedef SomeLocalType * Operand;

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand, WG_PP_PARSEDTYPE_LOCALTYPE_OPERAND(S3))

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand const, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S3))

#ifdef BOOST_NO_CXX11_VARIADIC_TEMPLATES
  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand const &,
    WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S3, 0))
#else
  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand const,
    WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S3, 0))
#endif
}

void testLocalTypeRefQual()
{
  struct SomeLocalType {};
  typedef SomeLocalType * Operand;

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand, WG_PP_PARSEDTYPE_LOCALTYPE_OPERAND(S4))

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand &, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S4))

#ifdef BOOST_NO_CXX11_VARIADIC_TEMPLATES
  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand &, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S4, 0))
#else
  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand &,
    WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S4, 0))
#endif
}

void testLocalTypeConstRefQual()
{
  struct SomeLocalType {};
  typedef SomeLocalType * Operand;

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand, WG_PP_PARSEDTYPE_LOCALTYPE_OPERAND(S5))

  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand const &, WG_PP_PARSEDTYPE_EXTRACTCPPTYPE(S5))

#ifdef BOOST_NO_CXX11_VARIADIC_TEMPLATES
  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand const &,
    WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S5, 0))
#else
  WG_PP_TESTS_UTIL_ISSAMETYPE(
    Operand const &,
    WG_PP_PARSEDTYPE_EXTRACTCPPTYPE_AS_CALLTRAITSPARAMTYPE(S5, 0))
#endif
}
